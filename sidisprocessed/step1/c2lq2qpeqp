double C2Lq2qpEqp(double inx, double inz, std::string cx, std::string cz,
            double Q, double muR, double muF, double muA)
{
  double res = 0.0;

  double rln2 = ln(2.0);

  double LMUR = 2*log(muR/Q);
  double LMUF = 2*log(muF/Q);
  double LMUA = 2*log(muA/Q);

  double NC = 3.0;
  double CF = 4.0/3.0;
  double TR = 0.5;

  if (cx == "D" && cz == "D") {
  res =  0;

  return res;
  }
  if (cx == "D" && cz == "0") {
  res =  0;

  return res;
  }
  if (cx == "D" && cz == "1") {
  res =  0;

  return res;
  }
  if (cx == "D" && cz == "2") {
  res =  0;

  return res;
  }
  if (cx == "D" && cz == "3") {
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "D") {
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "0") {
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "1") {
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "2") {
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "3") {
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "D") {
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "0") {
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "1") {
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "2") {
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "3") {
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "D") {
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "0") {
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "1") {
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "2") {
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "3") {
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "D") {
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "0") {
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "1") {
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "2") {
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "3") {
  res =  0;

  return res;
  }
  if (cx == "D" && cz == "R") {
  double z = inz;
  double omz = 1.-z;
  double opz = 1.+z;
  res =  0;

  return res;
  }
  if (cx == "0" && cz == "R") {
  double z = inz;
  double omz = 1.-z;
  double opz = 1.+z;
  res =  0;

  return res;
  }
  if (cx == "1" && cz == "R") {
  double z = inz;
  double omz = 1.-z;
  double opz = 1.+z;
  res =  0;

  return res;
  }
  if (cx == "2" && cz == "R") {
  double z = inz;
  double omz = 1.-z;
  double opz = 1.+z;
  res =  0;

  return res;
  }
  if (cx == "3" && cz == "R") {
  double z = inz;
  double omz = 1.-z;
  double opz = 1.+z;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "D") {
  double x = inx;
  double omx = 1.-x;
  double opx = 1.+x;
  double op6xpxsq = 1.+6.*x+x*x;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "0") {
  double x = inx;
  double omx = 1.-x;
  double opx = 1.+x;
  double op6xpxsq = 1.+6.*x+x*x;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "1") {
  double x = inx;
  double omx = 1.-x;
  double opx = 1.+x;
  double op6xpxsq = 1.+6.*x+x*x;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "2") {
  double x = inx;
  double omx = 1.-x;
  double opx = 1.+x;
  double op6xpxsq = 1.+6.*x+x*x;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "3") {
  double x = inx;
  double omx = 1.-x;
  double opx = 1.+x;
  double op6xpxsq = 1.+6.*x+x*x;
  res =  0;

  return res;
  }
  if (cx == "R" && cz == "R") {
    double x = inx;
    double z = inz;
    double omz = 1.-z;
    double opz = 1.+z;
    double omx = 1.-x;
    double opx = 1.+x;
    double op6xpxsq = 1.+6.*x+x*x;
    double xmz = x-z;
    double omxmz = 1.-x-z;
    double poly2 = 1 + 2*x + x*x - 4*x*z;
    double sqrtxz1 = mysqrt(1 - 2*z + z*z + 4*x*z);
    double sqrtxz2 = mysqrt(poly2);
    double sqrtxz3 = mysqrt(x/z);
    if (z < 1.-x && z < x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z > 1.-x && z  < x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z < 1.-x && z > x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z > 1.-x && z > x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z > x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z < x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z < 1.-x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z > 1.-x) {
    double tmp = 0.0;
    tmp =  0;

    res += tmp;
    }
    if (z != x && z != 1.-x) {
    double tmp = 0.0;
    tmp = 20./9.*pow(x,-1)*CF - 50./3.*CF + 20*z*CF + 14./3.*x*CF - 2./3.*x*pow(pi,2)*CF - 20*x*z*
      CF + 88./9.*pow(x,2)*CF - 4./3.*LMUF*pow(x,-1)*CF + 4*LMUF*CF - 8./3.*LMUF*pow(x,2)*CF - 1./2.
      *ln(x)*pow(x,-1)*pow(poly2,-1)*CF + 1./2.*ln(x)*pow(x,-1)*CF + 1./2.*ln(x)*pow(poly2,-1)*CF
       - 3./2.*ln(x)*CF + 10*ln(x)*z*CF + ln(x)*x*pow(poly2,-1)*CF - 33./2.*ln(x)*x*CF + 10*ln(x)*x
      *z*CF - ln(x)*pow(x,2)*pow(poly2,-1)*CF - 17./2.*ln(x)*pow(x,2)*CF - 1./2.*ln(x)*pow(x,3)*
      pow(poly2,-1)*CF + 1./2.*ln(x)*pow(x,4)*pow(poly2,-1)*CF + 4*ln(x)*LMUF*x*CF - 1./4.*ln(x)*
      ln(1 - sqrtxz2 + x)*pow(x,-1)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./4.*ln(x)*ln(1 - sqrtxz2
       + x)*pow(x,-1)*pow(sqrtxz2,-1)*CF - 1./2.*ln(x)*ln(1 - sqrtxz2 + x)*pow(sqrtxz2,-1)*CF + ln(
      x)*ln(1 - sqrtxz2 + x)*z*pow(sqrtxz2,-1)*CF + 3./4.*ln(x)*ln(1 - sqrtxz2 + x)*x*pow(
      sqrtxz2,-1)*pow(poly2,-1)*CF - 4*ln(x)*ln(1 - sqrtxz2 + x)*x*pow(sqrtxz2,-1)*CF + 20*ln(x)*
      ln(1 - sqrtxz2 + x)*x*z*pow(sqrtxz2,-1)*CF - 20*ln(x)*ln(1 - sqrtxz2 + x)*x*pow(z,2)*pow(
      sqrtxz2,-1)*CF - 7./2.*ln(x)*ln(1 - sqrtxz2 + x)*pow(x,2)*pow(sqrtxz2,-1)*CF + 7*ln(x)*ln(1
       - sqrtxz2 + x)*pow(x,2)*z*pow(sqrtxz2,-1)*CF - 3./4.*ln(x)*ln(1 - sqrtxz2 + x)*pow(x,3)*pow(
      sqrtxz2,-1)*pow(poly2,-1)*CF - 1./4.*ln(x)*ln(1 - sqrtxz2 + x)*pow(x,3)*pow(sqrtxz2,-1)*CF + 
      1./4.*ln(x)*ln(1 - sqrtxz2 + x)*pow(x,5)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./4.*ln(x)*ln(1
       + sqrtxz2 + x)*pow(x,-1)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF;
      tmp +=  - 1./4.*ln(x)*ln(1 + sqrtxz2 + x)*pow(x,-1)*pow(sqrtxz2,-1)*CF + 1./2.*ln(x)*ln(1 + 
      sqrtxz2 + x)*pow(sqrtxz2,-1)*CF - ln(x)*ln(1 + sqrtxz2 + x)*z*pow(sqrtxz2,-1)*CF - 3./4.*ln(x
      )*ln(1 + sqrtxz2 + x)*x*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 4*ln(x)*ln(1 + sqrtxz2 + x)*x*pow(
      sqrtxz2,-1)*CF - 20*ln(x)*ln(1 + sqrtxz2 + x)*x*z*pow(sqrtxz2,-1)*CF + 20*ln(x)*ln(1 + 
      sqrtxz2 + x)*x*pow(z,2)*pow(sqrtxz2,-1)*CF + 7./2.*ln(x)*ln(1 + sqrtxz2 + x)*pow(x,2)*pow(
      sqrtxz2,-1)*CF - 7*ln(x)*ln(1 + sqrtxz2 + x)*pow(x,2)*z*pow(sqrtxz2,-1)*CF + 3./4.*ln(x)*ln(1
       + sqrtxz2 + x)*pow(x,3)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./4.*ln(x)*ln(1 + sqrtxz2 + x)*
      pow(x,3)*pow(sqrtxz2,-1)*CF - 1./4.*ln(x)*ln(1 + sqrtxz2 + x)*pow(x,5)*pow(sqrtxz2,-1)*pow(
      poly2,-1)*CF + 4*pow(ln(x),2)*x*CF - 2*ln(x)*ln(z)*x*CF - 4*ln(x)*ln(omz)*x*CF - 1./2.*ln(z)*
      pow(x,-1)*pow(poly2,-1)*CF + 11./6.*ln(z)*pow(x,-1)*CF - 1./2.*ln(z)*pow(poly2,-1)*CF - 13./2.
      *ln(z)*CF + 10*ln(z)*z*CF + ln(z)*x*pow(poly2,-1)*CF + 3./2.*ln(z)*x*CF - 10*ln(z)*x*z*CF + 
      ln(z)*pow(x,2)*pow(poly2,-1)*CF + 19./6.*ln(z)*pow(x,2)*CF - 1./2.*ln(z)*pow(x,3)*pow(
      poly2,-1)*CF - 1./2.*ln(z)*pow(x,4)*pow(poly2,-1)*CF + 4./3.*ln(omx)*pow(x,-1)*CF - 4*ln(omx)
      *CF + 8./3.*ln(omx)*pow(x,2)*CF + 4./3.*ln(omz)*pow(x,-1)*CF - 4*ln(omz)*CF + 8./3.*ln(omz)*
      pow(x,2)*CF - 1./4.*Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,-1)*pow(
      sqrtxz2,-1)*pow(poly2,-1)*CF;
      tmp +=  + 1./4.*Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,-1)*pow(
      sqrtxz2,-1)*CF - 1./2.*Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(sqrtxz2,-1)
      *CF + Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*z*pow(sqrtxz2,-1)*CF + 3./4.*
      Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*x*pow(sqrtxz2,-1)*pow(poly2,-1)*CF - 4
      *Li2(1./2. - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*x*pow(sqrtxz2,-1)*CF + 20*Li2(1./2.
       - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*x*z*pow(sqrtxz2,-1)*CF - 20*Li2(1./2. - 1./2.*
      pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*x*pow(z,2)*pow(sqrtxz2,-1)*CF - 7./2.*Li2(1./2. - 1./2.*
      pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,2)*pow(sqrtxz2,-1)*CF + 7*Li2(1./2. - 1./2.*pow(
      x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,2)*z*pow(sqrtxz2,-1)*CF - 3./4.*Li2(1./2. - 1./2.*pow(
      x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,3)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF - 1./4.*Li2(1./2.
       - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,3)*pow(sqrtxz2,-1)*CF + 1./4.*Li2(1./2.
       - 1./2.*pow(x,-1) - 1./2.*pow(x,-1)*sqrtxz2)*pow(x,5)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./
      4.*Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,-1)*pow(sqrtxz2,-1)*pow(
      poly2,-1)*CF - 1./4.*Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,-1)*pow(
      sqrtxz2,-1)*CF + 1./2.*Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(sqrtxz2,-1)
      *CF;
      tmp +=  - Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*z*pow(sqrtxz2,-1)*CF - 3./4.
      *Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*x*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 
      4*Li2(1./2. - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*x*pow(sqrtxz2,-1)*CF - 20*Li2(1./2.
       - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*x*z*pow(sqrtxz2,-1)*CF + 20*Li2(1./2. - 1./2.*
      pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*x*pow(z,2)*pow(sqrtxz2,-1)*CF + 7./2.*Li2(1./2. - 1./2.*
      pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,2)*pow(sqrtxz2,-1)*CF - 7*Li2(1./2. - 1./2.*pow(
      x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,2)*z*pow(sqrtxz2,-1)*CF + 3./4.*Li2(1./2. - 1./2.*pow(
      x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,3)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./4.*Li2(1./2.
       - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,3)*pow(sqrtxz2,-1)*CF - 1./4.*Li2(1./2.
       - 1./2.*pow(x,-1) + 1./2.*pow(x,-1)*sqrtxz2)*pow(x,5)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./
      4.*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,-1)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF - 1./4.*
      Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,-1)*pow(sqrtxz2,-1)*CF + 1./2.*Li2(1./2. - 1./2.*
      sqrtxz2 - 1./2.*x)*pow(sqrtxz2,-1)*CF - Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*z*pow(
      sqrtxz2,-1)*CF - 3./4.*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*x*pow(sqrtxz2,-1)*pow(poly2,-1)*
      CF + 4*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*x*pow(sqrtxz2,-1)*CF - 20*Li2(1./2. - 1./2.*
      sqrtxz2 - 1./2.*x)*x*z*pow(sqrtxz2,-1)*CF;
      tmp +=  + 20*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*x*pow(z,2)*pow(sqrtxz2,-1)*CF + 7./2.*Li2(1.
      /2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,2)*pow(sqrtxz2,-1)*CF - 7*Li2(1./2. - 1./2.*sqrtxz2 - 1./
      2.*x)*pow(x,2)*z*pow(sqrtxz2,-1)*CF + 3./4.*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,3)*
      pow(sqrtxz2,-1)*pow(poly2,-1)*CF + 1./4.*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,3)*pow(
      sqrtxz2,-1)*CF - 1./4.*Li2(1./2. - 1./2.*sqrtxz2 - 1./2.*x)*pow(x,5)*pow(sqrtxz2,-1)*pow(
      poly2,-1)*CF - 1./4.*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,-1)*pow(sqrtxz2,-1)*pow(
      poly2,-1)*CF + 1./4.*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,-1)*pow(sqrtxz2,-1)*CF - 1./2.
      *Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(sqrtxz2,-1)*CF + Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*
      x)*z*pow(sqrtxz2,-1)*CF + 3./4.*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*x*pow(sqrtxz2,-1)*pow(
      poly2,-1)*CF - 4*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*x*pow(sqrtxz2,-1)*CF + 20*Li2(1./2. + 1.
      /2.*sqrtxz2 - 1./2.*x)*x*z*pow(sqrtxz2,-1)*CF - 20*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*x*
      pow(z,2)*pow(sqrtxz2,-1)*CF - 7./2.*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,2)*pow(
      sqrtxz2,-1)*CF + 7*Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,2)*z*pow(sqrtxz2,-1)*CF - 3./4.
      *Li2(1./2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,3)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF - 1./4.*Li2(1.
      /2. + 1./2.*sqrtxz2 - 1./2.*x)*pow(x,3)*pow(sqrtxz2,-1)*CF + 1./4.*Li2(1./2. + 1./2.*sqrtxz2
       - 1./2.*x)*pow(x,5)*pow(sqrtxz2,-1)*pow(poly2,-1)*CF;
      tmp +=  + 4*Li2(x)*x*CF;

    res += tmp;
    }
  return res;
  }
}