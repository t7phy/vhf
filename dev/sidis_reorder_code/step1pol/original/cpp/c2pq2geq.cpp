double C2Pq2gEq(double inx, double inz, std::string cx, std::string cz,
                double Q, double muR, double muF, double muA)
{
  double res = 0.0;

  double rln2 = ln(2.0);

  double LMUR = 2 * log(muR / Q);
  double LMUF = 2 * log(muF / Q);
  double LMUA = 2 * log(muA / Q);

  double NC = 3.0;
  double CF = 4.0 / 3.0;
  double TR = 0.5;

  if (cx == "D" && cz == "D")
  {
    res = 0;

    return res;
  }
  if (cx == "D" && cz == "0")
  {
    res = 0;

    return res;
  }
  if (cx == "D" && cz == "1")
  {
    res = 0;

    return res;
  }
  if (cx == "D" && cz == "2")
  {
    res = 0;

    return res;
  }
  if (cx == "D" && cz == "3")
  {
    res = 0;

    return res;
  }
  if (cx == "0" && cz == "D")
  {
    res = 0;

    return res;
  }
  if (cx == "0" && cz == "0")
  {
    res = 0;

    return res;
  }
  if (cx == "0" && cz == "1")
  {
    res = 0;

    return res;
  }
  if (cx == "0" && cz == "2")
  {
    res = 0;

    return res;
  }
  if (cx == "0" && cz == "3")
  {
    res = 0;

    return res;
  }
  if (cx == "1" && cz == "D")
  {
    res = 0;

    return res;
  }
  if (cx == "1" && cz == "0")
  {
    res = 0;

    return res;
  }
  if (cx == "1" && cz == "1")
  {
    res = 0;

    return res;
  }
  if (cx == "1" && cz == "2")
  {
    res = 0;

    return res;
  }
  if (cx == "1" && cz == "3")
  {
    res = 0;

    return res;
  }
  if (cx == "2" && cz == "D")
  {
    res = 0;

    return res;
  }
  if (cx == "2" && cz == "0")
  {
    res = 0;

    return res;
  }
  if (cx == "2" && cz == "1")
  {
    res = 0;

    return res;
  }
  if (cx == "2" && cz == "2")
  {
    res = 0;

    return res;
  }
  if (cx == "2" && cz == "3")
  {
    res = 0;

    return res;
  }
  if (cx == "3" && cz == "D")
  {
    res = 0;

    return res;
  }
  if (cx == "3" && cz == "0")
  {
    res = 0;

    return res;
  }
  if (cx == "3" && cz == "1")
  {
    res = 0;

    return res;
  }
  if (cx == "3" && cz == "2")
  {
    res = 0;

    return res;
  }
  if (cx == "3" && cz == "3")
  {
    res = 0;

    return res;
  }
  if (cx == "D" && cz == "R")
  {
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    res = 1169. / 54. * pow(z, -1) * CF * NC + 4. / 3. * pow(z, -1) * CF * NC * pow(rln2, 3) - 9. / 2. * pow(z, -1) * LMUA * CF * pow(NC, -1) + 55. / 18. * pow(z, -1) * LMUA * CF * NC + 2. / 3. * pow(z, -1) * LMUA * LMUR * CF * NF - 11. / 3. * pow(z, -1) * LMUA * LMUR * CF * NC - 3. / 2. * pow(z, -1) * LMUA * LMUF * CF * pow(NC, -1) + 3. / 2. * pow(z, -1) * LMUA * LMUF * CF * NC - 2. / 3. * pow(z, -1) * pow(LMUA, 2) * CF * NF - 3. / 2. * pow(z, -1) * pow(LMUA, 2) * CF * NC + 3 * CF * pow(NC, -1) - 295. / 18. * CF * NC + 4. / 3. * CF * NC * pow(rln2, 3) + 17. / 4. * LMUA * CF * pow(NC, -1) - 95. / 12. * LMUA * CF * NC - 2. / 3. * LMUA * LMUR * CF * NF + 11. / 3. * LMUA * LMUR * CF * NC + 3. / 2. * LMUA * LMUF * CF * pow(NC, -1) - 3. / 2. * LMUA * LMUF * CF * NC - 1. / 2. * pow(LMUA, 2) * CF * pow(NC, -1) + 2. / 3. * pow(LMUA, 2) * CF * NF + 5. / 6. * pow(LMUA, 2) * CF * NC + 13. / 8. * z * CF * pow(NC, -1) - 389. / 72. * z * CF * NC + 2. / 3. * z * CF * NC * pow(rln2, 3) - 1. / 3. * z * LMUR * CF * NF + 11. / 6. * z * LMUR * CF * NC + 3. / 4. * z * LMUF * CF * pow(NC, -1) - 3. / 4. * z * LMUF * CF * NC - 7. / 4. * z * LMUA * CF * pow(NC, -1) + 1. / 3. * z * LMUA * CF * NF + 31. / 12. * z * LMUA * CF * NC + 1. / 3. * z * LMUA * LMUR * CF * NF - 11. / 6. * z * LMUA * LMUR * CF * NC - 3. / 4. * z * LMUA * LMUF * CF * pow(NC, -1) + 3. / 4. * z * LMUA * LMUF * CF * NC + 1. / 8. * z * pow(LMUA, 2) * CF * pow(NC, -1) - 1. / 3. * z * pow(LMUA, 2) * CF * NF + 53. / 24. * z * pow(LMUA, 2) * CF * NC -
          269. / 54. * pow(z, 2) * CF * NC + 13. / 9. * pow(z, 2) * LMUA * CF * NC + 2. / 3. * pow(z, 2) * pow(LMUA, 2) * CF * NC - 5 * zeta3 * pow(z, -1) * CF * pow(NC, -1) - 14 * zeta3 * pow(z, -1) * CF * NC + 3 * zeta3 * CF * pow(NC, -1) - 3. / 2. * zeta3 * z * CF * pow(NC, -1) - 12 * zeta3 * z * CF * NC - 1. / 4. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) - 1. / 4. * pow(pi, 2) * pow(z, -1) * CF * NC;
    res += -2. / 3. * pow(pi, 2) * pow(z, -1) * CF * NC * rln2 - 1. / 3. * pow(pi, 2) * pow(z, -1) * LMUF * CF * pow(NC, -1) + 1. / 3. * pow(pi, 2) * pow(z, -1) * LMUF * CF * NC - 1. / 3. * pow(pi, 2) * pow(z, -1) * LMUA * CF * pow(NC, -1) + 1. / 3. * pow(pi, 2) * pow(z, -1) * LMUA * CF * NC + 2. / 3. * pow(pi, 2) * CF * pow(NC, -1) - 5. / 3. * pow(pi, 2) * CF * NC - 2. / 3. * pow(pi, 2) * CF * NC * rln2 + 1. / 3. * pow(pi, 2) * LMUF * CF * pow(NC, -1) - 1. / 3. * pow(pi, 2) * LMUF * CF * NC + 1. / 2. * pow(pi, 2) * LMUA * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * LMUA * CF * NC - 1. / 8. * pow(pi, 2) * z * CF * pow(NC, -1) + 7. / 24. * pow(pi, 2) * z * CF * NC - 1. / 3. * pow(pi, 2) * z * CF * NC * rln2 - 1. / 6. * pow(pi, 2) * z * LMUF * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * z * LMUF * CF * NC - 1. / 4. * pow(pi, 2) * z * LMUA * CF * pow(NC, -1) + 7. / 12. * pow(pi, 2) * z * LMUA * CF * NC - 2 * ln(1 + z) * pow(z, -1) * CF * NC * pow(rln2, 2) - 2 * ln(1 + z) * CF * NC * pow(rln2, 2) - ln(1 + z) * z * CF * NC * pow(rln2, 2) + 1. / 3. * ln(1 + z) * pow(pi, 2) * pow(z, -1) * CF * NC + 1. / 3. * ln(1 + z) * pow(pi, 2) * CF * NC + 1. / 6. * ln(1 + z) * pow(pi, 2) * z * CF * NC + 9. / 2. * ln(z) * pow(z, -1) * CF * pow(NC, -1) + 71. / 18. * ln(z) * pow(z, -1) * CF * NC - 2. / 3. * ln(z) * pow(z, -1) * LMUR * CF * NF + 11. / 3. * ln(z) * pow(z, -1) * LMUR * CF * NC + 3. / 2. * ln(z) * pow(z, -1) * LMUF * CF * pow(NC, -1) - 3. / 2. * ln(z) * pow(z, -1) * LMUF * CF * NC + 2. / 3. * ln(z) * pow(z, -1) * LMUA * CF * NF + 29. / 3. * ln(z) * pow(z, -1) * LMUA * CF * NC - 2 * ln(z) * pow(z, -1) * pow(LMUA, 2) * CF * NC - 67. / 8. * ln(z) * CF * pow(NC, -1) + 247. / 8. * ln(z) * CF * NC + 2. / 3. * ln(z) * LMUR * CF * NF - 11. / 3. * ln(z) * LMUR * CF * NC - 3. / 2. * ln(z) * LMUF * CF * pow(NC, -1) + 3. / 2. * ln(z) * LMUF * CF * NC - 3. / 2. * ln(z) * LMUA * CF * pow(NC, -1);
    res += -2. / 3. * ln(z) * LMUA * CF * NF + 19. / 6. * ln(z) * LMUA * CF * NC - 1. / 2. * ln(z) * pow(LMUA, 2) * CF * pow(NC, -1) - 3. / 2. * ln(z) * pow(LMUA, 2) * CF * NC + 45. / 8. * ln(z) * z * CF * pow(NC, -1) + 31. / 8. * ln(z) * z * CF * NC - 1. / 3. * ln(z) * z * LMUR * CF * NF + 11. / 6. * ln(z) * z * LMUR * CF * NC + 3. / 4. * ln(z) * z * LMUF * CF * pow(NC, -1) -
           3. / 4. * ln(z) * z * LMUF * CF * NC + 3. / 4. * ln(z) * z * LMUA * CF * pow(NC, -1) + 1. / 3. * ln(z) * z * LMUA * CF * NF - 55. / 12. * ln(z) * z * LMUA * CF * NC + 1. / 4. * ln(z) * z * pow(LMUA, 2) * CF * pow(NC, -1) - 9. / 4. * ln(z) * z * pow(LMUA, 2) * CF * NC + 31. / 9. * ln(z) * pow(z, 2) * CF * NC - 4. / 3. * ln(z) * pow(z, 2) * LMUA * CF * NC + 1. / 3. * ln(z) * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) - ln(z) * pow(pi, 2) * pow(z, -1) * CF * NC - 1. / 2. * ln(z) * pow(pi, 2) * CF * pow(NC, -1) - 1. / 6. * ln(z) * pow(pi, 2) * CF * NC + 1. / 4. * ln(z) * pow(pi, 2) * z * CF * pow(NC, -1) - 11. / 12. * ln(z) * pow(pi, 2) * z * CF * NC - 4 * ln(z) * ln(1 + z) * pow(z, -1) * LMUA * CF * NC - 4 * ln(z) * ln(1 + z) * LMUA * CF * NC +
           ln(z) * ln(1 + z) * z * CF * NC - 2 * ln(z) * ln(1 + z) * z * LMUA * CF * NC - 20. / 3. * pow(ln(z), 2) * pow(z, -1) * CF * NC + 6 * pow(ln(z), 2) * pow(z, -1) * LMUA * CF * NC + pow(ln(z), 2) * CF * pow(NC, -1) - 5 * pow(ln(z), 2) * CF * NC + pow(ln(z), 2) * LMUA * CF * pow(NC, -1) + 3 * pow(ln(z), 2) * LMUA * CF * NC - 13. / 16. * pow(ln(z), 2) * z * CF * pow(NC, -1) - 7. / 16. * pow(ln(z), 2) * z * CF * NC - 1. / 2. * pow(ln(z), 2) * z * LMUA * CF * pow(NC, -1) + 11. / 2. * pow(ln(z), 2) * z * LMUA * CF * NC + 3 * pow(ln(z), 2) * ln(1 + z) * pow(z, -1) * CF * NC + 3 * pow(ln(z), 2) * ln(1 + z) * CF * NC + 3. / 2. * pow(ln(z), 2) * ln(1 + z) * z * CF * NC - 10. / 3. * pow(ln(z), 3) * pow(z, -1) * CF * NC - 5. / 12. * pow(ln(z), 3) * CF * pow(NC, -1);
    res += -5. / 4. * pow(ln(z), 3) * CF * NC + 5. / 24. * pow(ln(z), 3) * z * CF * pow(NC, -1) - 65. / 24. * pow(ln(z), 3) * z * CF * NC + 2 * pow(ln(z), 2) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + pow(ln(z), 2) * ln(omz) * pow(z, -1) * CF * NC - 2 * pow(ln(z), 2) * ln(omz) * CF * pow(NC, -1) - pow(ln(z), 2) * ln(omz) * CF * NC + pow(ln(z), 2) * ln(omz) * z * CF * pow(NC, -1) + 1. / 2. * pow(ln(z), 2) * ln(omz) * z * CF * NC - 2 * ln(z) * ln(omz) * pow(z, -1) * LMUA * CF * pow(NC, -1) - 6 * ln(z) * ln(omz) * pow(z, -1) * LMUA * CF * NC + 2 * ln(z) * ln(omz) * LMUA * CF * pow(NC, -1) + 6 * ln(z) * ln(omz) * LMUA * CF * NC + 3 * ln(z) * ln(omz) * z * CF * NC - ln(z) * ln(omz) * z * LMUA * CF * pow(NC, -1) - 3 * ln(z) * ln(omz) * z * LMUA * CF * NC + 4 * ln(z) * ln(omz) * ln(1 + z) * pow(z, -1) * CF * NC + 4 * ln(z) * ln(omz) * ln(1 + z) * CF * NC + 2 * ln(z) * ln(omz) * ln(1 + z) * z * CF * NC + 3 * ln(z) * pow(ln(omz), 2) * pow(z, -1) * CF * NC + 3. / 2. * ln(z) * pow(ln(omz), 2) * CF * pow(NC, -1) + 15. / 2. * ln(z) * pow(ln(omz), 2) * CF * NC - 3. / 4. * ln(z) * pow(ln(omz), 2) * z * CF * pow(NC, -1) + 21. / 4. * ln(z) * pow(ln(omz), 2) * z * CF * NC + 2 * ln(z) * Li2(-z) * pow(z, -1) * CF * NC + 2 * ln(z) * Li2(-z) * CF * NC + ln(z) * Li2(-z) * z * CF * NC + 6 * ln(z) * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(z) * Li2(z) * pow(z, -1) * CF * NC - 6 * ln(z) * Li2(z) * CF * pow(NC, -1) + 4 * ln(z) * Li2(z) * CF * NC + 3 * ln(z) * Li2(z) * z * CF * pow(NC, -1) - 2 * ln(z) * Li2(z) * z * CF * NC + 9. / 2. * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 55. / 18. * ln(omz) * pow(z, -1) * CF * NC - 2 * ln(omz) * pow(z, -1) * CF * NC * pow(rln2, 2) - 2. / 3. * ln(omz) * pow(z, -1) * LMUR * CF * NF + 11. / 3. * ln(omz) * pow(z, -1) * LMUR * CF * NC + 3. / 2. * ln(omz) * pow(z, -1) * LMUF * CF * pow(NC, -1);
    res += -3. / 2. * ln(omz) * pow(z, -1) * LMUF * CF * NC - 3. / 2. * ln(omz) * pow(z, -1) * LMUA * CF * pow(NC, -1) + 2. / 3. * ln(omz) * pow(z, -1) * LMUA * CF * NF + 49. / 6. * ln(omz) * pow(z, -1) * LMUA * CF * NC - ln(omz) * pow(z, -1) * pow(LMUA, 2) * CF * pow(NC, -1) + 3 * ln(omz) * pow(z, -1) * pow(LMUA, 2) * CF * NC - 9. / 2. * ln(omz) * CF * pow(NC, -1) + 23. / 3. * ln(omz) * CF * NC - 2 * ln(omz) * CF * NC * pow(rln2, 2) + 2. / 3. * ln(omz) * LMUR * CF * NF - 11. / 3. * ln(omz) * LMUR * CF * NC - 3. / 2. * ln(omz) * LMUF * CF * pow(NC, -1) + 3. / 2. * ln(omz) * LMUF * CF * NC + 5. / 2. * ln(omz) * LMUA * CF * pow(NC, -1) - 2. / 3. * ln(omz) * LMUA * CF * NF - 41. / 6. * ln(omz) * LMUA * CF * NC + ln(omz) * pow(LMUA, 2) * CF * pow(NC, -1) - 3 * ln(omz) * pow(LMUA, 2) * CF * NC + 5. / 2. * ln(omz) * z * CF * pow(NC, -1) - 31. / 6. * ln(omz) * z * CF * NC - ln(omz) * z * CF * NC * pow(rln2, 2) - 1. / 3. * ln(omz) * z * LMUR * CF * NF + 11. / 6. * ln(omz) * z * LMUR * CF * NC + 3. / 4. * ln(omz) * z * LMUF * CF * pow(NC, -1) - 3. / 4. * ln(omz) * z * LMUF * CF * NC + 1. / 3. * ln(omz) * z * LMUA * CF * NF - 17. / 6. * ln(omz) * z * LMUA * CF * NC - 1. / 2. * ln(omz) * z * pow(LMUA, 2) * CF * pow(NC, -1) + 3. / 2. * ln(omz) * z * pow(LMUA, 2) * CF * NC - 13. / 9. * ln(omz) * pow(z, 2) * CF * NC - 4. / 3. * ln(omz) * pow(z, 2) * LMUA * CF * NC + 2. / 3. * ln(omz) * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) - 2. / 3. * ln(omz) * pow(pi, 2) * pow(z, -1) * CF * NC - ln(omz) * pow(pi, 2) * CF * pow(NC, -1) - ln(omz) * pow(pi, 2) * CF * NC + 1. / 2. * ln(omz) * pow(pi, 2) * z * CF * pow(NC, -1) - 7. / 6. * ln(omz) * pow(pi, 2) * z * CF * NC + 4 * ln(omz) * ln(1 + z) * pow(z, -1) * CF * NC * rln2 + 4 * ln(omz) * ln(1 + z) * CF * NC * rln2 + 2 * ln(omz) * ln(1 + z) * z * CF * NC * rln2 - 2 * ln(omz) * pow(ln(1 + z), 2) * pow(z, -1) * CF * NC;
    res += -2 * ln(omz) * pow(ln(1 + z), 2) * CF * NC - ln(omz) * pow(ln(1 + z), 2) * z * CF * NC + 3. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) - 20. / 3. * pow(ln(omz), 2) * pow(z, -1) * CF * NC + 2 * pow(ln(omz), 2) * pow(z, -1) * LMUA * CF * pow(NC, -1) - 4 * pow(ln(omz), 2) * pow(z, -1) * LMUA * CF * NC - 2 * pow(ln(omz), 2) * CF * pow(NC, -1) + 6 * pow(ln(omz), 2) * CF * NC - 2 * pow(ln(omz), 2) * LMUA * CF * pow(NC, -1) + 4 * pow(ln(omz), 2) * LMUA * CF * NC + 1. / 8. * pow(ln(omz), 2) * z * CF * pow(NC, -1) - 1. / 8. * pow(ln(omz), 2) * z * CF * NC + pow(ln(omz), 2) * z * LMUA * CF * pow(NC, -1) - 2 * pow(ln(omz), 2) * z * LMUA * CF * NC + 2. / 3. * pow(ln(omz), 2) * pow(z, 2) * CF * NC - 5. / 6. * pow(ln(omz), 3) * pow(z, -1) * CF * pow(NC, -1) + 7. / 6. * pow(ln(omz), 3) * pow(z, -1) * CF * NC + 5. / 6. * pow(ln(omz), 3) * CF * pow(NC, -1) - 7. / 6. * pow(ln(omz), 3) * CF * NC - 5. / 12. * pow(ln(omz), 3) * z * CF * pow(NC, -1) + 7. / 12. * pow(ln(omz), 3) * z * CF * NC - 2 * ln(omz) * Li2(1 - z) * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(omz) * Li2(1 - z) * pow(z, -1) * CF * NC + 3 * ln(omz) * Li2(1 - z) * CF * pow(NC, -1) + 9 * ln(omz) * Li2(1 - z) * CF * NC - 3. / 2. * ln(omz) * Li2(1 - z) * z * CF * pow(NC, -1) + 3. / 2. * ln(omz) * Li2(1 - z) * z * CF * NC + 4 * ln(omz) * Li2(-z) * pow(z, -1) * CF * NC + 4 * ln(omz) * Li2(-z) * CF * NC + 2 * ln(omz) * Li2(-z) * z * CF * NC + 3 * ln(omz) * Li2(z) * pow(z, -1) * CF * pow(NC, -1) + 3 * ln(omz) * Li2(z) * pow(z, -1) * CF * NC - ln(omz) * Li2(z) * CF * pow(NC, -1) + 11 * ln(omz) * Li2(z) * CF * NC + 1. / 2. * ln(omz) * Li2(z) * z * CF * pow(NC, -1) + 13. / 2. * ln(omz) * Li2(z) * z * CF * NC + 2. / 3. * ln(opz) * pow(pi, 2) * pow(z, -1) * CF * NC + 2. / 3. * ln(opz) * pow(pi, 2) * CF * NC;
    res += +1. / 3. * ln(opz) * pow(pi, 2) * z * CF * NC - 4 * Li3(1. / 2. - 1. / 2. * z) * pow(z, -1) * CF * NC - 4 * Li3(1. / 2. - 1. / 2. * z) * CF * NC - 2 * Li3(1. / 2. - 1. / 2. * z) * z * CF * NC - 4 * Li3(1. / 2. + 1. / 2. * z) * pow(z, -1) * CF * NC - 4 * Li3(1. / 2. + 1. / 2. * z) * CF * NC - 2 * Li3(1. / 2. + 1. / 2. * z) * z * CF * NC + 3 * Li3(1 - z) * pow(z, -1) * CF * pow(NC, -1) + 7 * Li3(1 - z) * pow(z, -1) * CF * NC - 2 * Li3(1 - z) * CF * pow(NC, -1) + 8 * Li3(1 - z) * CF * NC + Li3(1 - z) * z * CF * pow(NC, -1) + 6 * Li3(1 - z) * z * CF * NC + 2 * Li3(-z) * pow(z, -1) * CF * NC + 2 * Li3(-z) * CF * NC + Li3(-z) * z * CF * NC + 4 * Li3(1 / (1 + z)) * pow(z, -1) * CF * NC + 4 * Li3(1 / (1 + z)) * CF * NC + 2 * Li3(1 / (1 + z)) * z * CF * NC - 4 * Li3(1 / (1 + z) - 1 / (1 + z) * z) * pow(z, -1) * CF * NC - 4 * Li3(1 / (1 + z) - 1 / (1 + z) * z) * CF * NC - 2 * Li3(1 / (1 + z) - 1 / (1 + z) * z) * z * CF * NC - 6 * Li3(z) * pow(z, -1) * CF * pow(NC, -1) + 20 * Li3(z) * pow(z, -1) * CF * NC + 8 * Li3(z) * CF * pow(NC, -1) - 2 * Li3(z) * CF * NC - 4 * Li3(z) * z * CF * pow(NC, -1) + 15 * Li3(z) * z * CF * NC - 4 * Li2(-z) * pow(z, -1) * LMUA * CF * NC - 4 * Li2(-z) * LMUA * CF * NC +
           Li2(-z) * z * CF * NC - 2 * Li2(-z) * z * LMUA * CF * NC - 3. / 2. * Li2(z) * pow(z, -1) * CF * pow(NC, -1) + 89. / 6. * Li2(z) * pow(z, -1) * CF * NC - 6 * Li2(z) * pow(z, -1) * LMUA * CF * pow(NC, -1) - 6 * Li2(z) * pow(z, -1) * LMUA * CF * NC - 2 * Li2(z) * CF * NC + 5 * Li2(z) * LMUA * CF * pow(NC, -1) - Li2(z) * LMUA * CF * NC + Li2(z) * z * CF * pow(NC, -1) + Li2(z) * z * CF * NC - 5. / 2. * Li2(z) * z * LMUA * CF * pow(NC, -1) - 11. / 2. * Li2(z) * z * LMUA * CF * NC - 4. / 3. * Li2(z) * pow(z, 2) * CF * NC;

    return res;
  }
  if (cx == "0" && cz == "R")
  {
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    res = 9. / 2. * pow(z, -1) * CF * pow(NC, -1) - 55. / 18. * pow(z, -1) * CF * NC - 2. / 3. * pow(z, -1) * LMUR * CF * NF + 11. / 3. * pow(z, -1) * LMUR * CF * NC + 3. / 2. * pow(z, -1) * LMUF * CF * pow(NC, -1) - 3. / 2. * pow(z, -1) * LMUF * CF * NC - 3. / 2. * pow(z, -1) * LMUA * CF * pow(NC, -1) + 2. / 3. * pow(z, -1) * LMUA * CF * NF + 49. / 6. * pow(z, -1) * LMUA * CF * NC - 2 * pow(z, -1) * LMUA * LMUF * CF * pow(NC, -1) + 2 * pow(z, -1) * LMUA * LMUF * CF * NC - 17. / 4. * CF * pow(NC, -1) + 95. / 12. * CF * NC + 2. / 3. * LMUR * CF * NF - 11. / 3. * LMUR * CF * NC - 3. / 2. * LMUF * CF * pow(NC, -1) + 3. / 2. * LMUF * CF * NC + 5. / 2. * LMUA * CF * pow(NC, -1) - 2. / 3. * LMUA * CF * NF - 41. / 6. * LMUA * CF * NC + 2 * LMUA * LMUF * CF * pow(NC, -1) - 2 * LMUA * LMUF * CF * NC + 5. / 2. * z * CF * pow(NC, -1) - 31. / 6. * z * CF * NC - 1. / 3. * z * LMUR * CF * NF + 11. / 6. * z * LMUR * CF * NC + 7. / 4. * z * LMUF * CF * pow(NC, -1) - 7. / 4. * z * LMUF * CF * NC - z * LMUA * CF * pow(NC, -1) + 1. / 3. * z * LMUA * CF * NF - 11. / 6. * z * LMUA * CF * NC - z * LMUA * LMUF * CF * pow(NC, -1) + z * LMUA * LMUF * CF * NC - 13. / 9. * pow(z, 2) * CF * NC - 4. / 3. * pow(z, 2) * LMUA * CF * NC + 2. / 3. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) - 2. / 3. * pow(pi, 2) * pow(z, -1) * CF * NC - 5. / 6. * pow(pi, 2) * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * CF * NC + 5. / 12. * pow(pi, 2) * z * CF * pow(NC, -1) - 3. / 4. * pow(pi, 2) * z * CF * NC + 3. / 2. * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 89. / 6. * ln(z) * pow(z, -1) * CF * NC + 2 * ln(z) * pow(z, -1) * LMUF * CF * pow(NC, -1) - 2 * ln(z) * pow(z, -1) * LMUF * CF * NC + 4 * ln(z) * pow(z, -1) * LMUA * CF * NC + 2 * ln(z) * CF * NC - 2 * ln(z) * LMUF * CF * pow(NC, -1) + 2 * ln(z) * LMUF * CF * NC + ln(z) * LMUA * CF * pow(NC, -1) + 3 * ln(z) * LMUA * CF * NC + 2 * ln(z) * z * CF * NC + ln(z) * z * LMUF * CF * pow(NC, -1);
    res += -ln(z) * z * LMUF * CF * NC - 1. / 2. * ln(z) * z * LMUA * CF * pow(NC, -1) + 9. / 2. * ln(z) * z * LMUA * CF * NC +
           4. / 3. * ln(z) * pow(z, 2) * CF * NC + 4 * ln(z) * ln(1 + z) * pow(z, -1) * CF * NC + 4 * ln(z) * ln(1 + z) * CF * NC + 2 * ln(z) * ln(1 + z) * z * CF * NC - 6 * pow(ln(z), 2) * pow(z, -1) * CF * NC - pow(ln(z), 2) * CF * pow(NC, -1) - 3 * pow(ln(z), 2) * CF * NC + 1. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) - 11. / 2. * pow(ln(z), 2) * z * CF * NC + 2 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(z) * ln(omz) * pow(z, -1) * CF * NC - 2 * ln(z) * ln(omz) * CF * pow(NC, -1) - 6 * ln(z) * ln(omz) * CF * NC + ln(z) * ln(omz) * z * CF * pow(NC, -1) + 3 * ln(z) * ln(omz) * z * CF * NC + 3 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 40. / 3. * ln(omz) * pow(z, -1) * CF * NC + 2 * ln(omz) * pow(z, -1) * LMUF * CF * pow(NC, -1) - 2 * ln(omz) * pow(z, -1) * LMUF * CF * NC + 2 * ln(omz) * pow(z, -1) * LMUA * CF * pow(NC, -1) - 6 * ln(omz) * pow(z, -1) * LMUA * CF * NC - 4 * ln(omz) * CF * pow(NC, -1) + 12 * ln(omz) * CF * NC - 2 * ln(omz) * LMUF * CF * pow(NC, -1) + 2 * ln(omz) * LMUF * CF * NC - 2 * ln(omz) * LMUA * CF * pow(NC, -1) + 6 * ln(omz) * LMUA * CF * NC + 3. / 4. * ln(omz) * z * CF * pow(NC, -1) + 1. / 4. * ln(omz) * z * CF * NC + ln(omz) * z * LMUF * CF * pow(NC, -1) -
           ln(omz) * z * LMUF * CF * NC + ln(omz) * z * LMUA * CF * pow(NC, -1) - 3 * ln(omz) * z * LMUA * CF * NC + 4. / 3. * ln(omz) * pow(z, 2) * CF * NC - 2 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(omz), 2) * pow(z, -1) * CF * NC + 2 * pow(ln(omz), 2) * CF * pow(NC, -1) - 4 * pow(ln(omz), 2) * CF * NC - pow(ln(omz), 2) * z * CF * pow(NC, -1) + 2 * pow(ln(omz), 2) * z * CF * NC + 4 * Li2(-z) * pow(z, -1) * CF * NC + 4 * Li2(-z) * CF * NC + 2 * Li2(-z) * z * CF * NC;
    res += +6 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) + 6 * Li2(z) * pow(z, -1) * CF * NC - 5 * Li2(z) * CF * pow(NC, -1) + Li2(z) * CF * NC + 5. / 2. * Li2(z) * z * CF * pow(NC, -1) + 11. / 2. * Li2(z) * z * CF * NC;

    return res;
  }
  if (cx == "1" && cz == "R")
  {
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    res = 3 * pow(z, -1) * CF * pow(NC, -1) - 40. / 3. * pow(z, -1) * CF * NC + 4 * pow(z, -1) * LMUF * CF * pow(NC, -1) - 4 * pow(z, -1) * LMUF * CF * NC + 2 * pow(z, -1) * LMUA * CF * pow(NC, -1) - 2 * pow(z, -1) * LMUA * CF * NC - 4 * CF * pow(NC, -1) + 12 * CF * NC - 4 * LMUF * CF * pow(NC, -1) + 4 * LMUF * CF * NC - 2 * LMUA * CF * pow(NC, -1) + 2 * LMUA * CF * NC + 3. / 4. * z * CF * pow(NC, -1) + 1. / 4. * z * CF * NC + 2 * z * LMUF * CF * pow(NC, -1) - 2 * z * LMUF * CF * NC + z * LMUA * CF * pow(NC, -1) - z * LMUA * CF * NC + 4. / 3. * pow(z, 2) * CF * NC - 2 * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * pow(z, -1) * CF * NC + ln(z) * CF * pow(NC, -1) - 5 * ln(z) * CF * NC - 1. / 2. * ln(z) * z * CF * pow(NC, -1) - 7. / 2. * ln(z) * z * CF * NC - 4 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 8 * ln(omz) * pow(z, -1) * CF * NC + 4 * ln(omz) * CF * pow(NC, -1) - 8 * ln(omz) * CF * NC - 2 * ln(omz) * z * CF * pow(NC, -1) + 4 * ln(omz) * z * CF * NC;

    return res;
  }
  if (cx == "2" && cz == "R")
  {
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    res = -3 * pow(z, -1) * CF * pow(NC, -1) + 3 * pow(z, -1) * CF * NC + 3 * CF * pow(NC, -1) - 3 * CF * NC - 3. / 2. * z * CF * pow(NC, -1) + 3. / 2. * z * CF * NC;

    return res;
  }
  if (cx == "3" && cz == "R")
  {
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "D")
  {
    double x = inx;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "0")
  {
    double x = inx;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "1")
  {
    double x = inx;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "2")
  {
    double x = inx;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "3")
  {
    double x = inx;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    res = 0;

    return res;
  }
  if (cx == "R" && cz == "R")
  {
    double x = inx;
    double z = inz;
    double omz = 1. - z;
    double opz = 1. + z;
    double omx = 1. - x;
    double opx = 1. + x;
    double op6xpxsq = 1. + 6. * x + x * x;
    double xmz = x - z;
    double omxmz = 1. - x - z;
    double poly2 = 1 + 2 * x + x * x - 4 * x * z;
    double sqrtxz1 = mysqrt(1 - 2 * z + z * z + 4 * x * z);
    double sqrtxz2 = mysqrt(poly2);
    double sqrtxz3 = mysqrt(x / z);
    if (z < 1. - x && z < x)
    {
      double tmp = 0.0;
      tmp = 8 * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * pow(z, -1) * CF * pow(NC, -1) - 8 * CF * pow(NC, -1) * pow(omx, -1) + 20 * CF * pow(NC, -1) + 12 * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * z * CF * pow(NC, -1) + 10 * x * pow(z, -1) * CF * pow(NC, -1) - 10 * x * CF * pow(NC, -1) - 5. / 3. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) + 2 * pow(pi, 2) * CF * pow(NC, -1) * pow(omx, -1) - 3 * pow(pi, 2) * CF * pow(NC, -1) - pow(pi, 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 5. / 3. * pow(pi, 2) * z * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * x * pow(z, -1) * CF * pow(NC, -1) - 1. / 3. * pow(pi, 2) * x * CF * pow(NC, -1) - 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) + 48 * ln(x) * CF * pow(NC, -1) * pow(omx, -1) - 54 * ln(x) * CF * pow(NC, -1) - 30 * ln(x) * z * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * z * CF * pow(NC, -1) - 12 * ln(x) * x * CF * pow(NC, -1) + 13 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 10 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) - 19 * pow(ln(x), 2) * CF * pow(NC, -1) * pow(omx, -1) + 20 * pow(ln(x), 2) * CF * pow(NC, -1) + 19. / 2. * pow(ln(x), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 13 * pow(ln(x), 2) * z * CF * pow(NC, -1) - 3 * pow(ln(x), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 6 * pow(ln(x), 2) * x * CF * pow(NC, -1) - 16 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 11 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) + 26 * ln(x) * ln(z) * CF * pow(NC, -1) * pow(omx, -1) - 22 * ln(x) * ln(z) * CF * pow(NC, -1) - 13 * ln(x) * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) + 16 * ln(x) * ln(z) * z * CF * pow(NC, -1) + 5 * ln(x) * ln(z) * x * pow(z, -1) * CF * pow(NC, -1);
      tmp += -10 * ln(x) * ln(z) * x * CF * pow(NC, -1) - 20 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 16 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 28 * ln(x) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) - 32 * ln(x) * ln(omx) * CF * pow(NC, -1) - 14 * ln(x) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(x) * ln(omx) * z * CF * pow(NC, -1) + 4 * ln(x) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) - 8 * ln(x) * ln(omx) * x * CF * pow(NC, -1) - 22 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 17 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 32 * ln(x) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 34 * ln(x) * ln(omz) * CF * pow(NC, -1) - 16 * ln(x) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 22 * ln(x) * ln(omz) * z * CF * pow(NC, -1) + 5 * ln(x) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) - 10 * ln(x) * ln(omz) * x * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - ln(x) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(x) * ln(xmz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(x) * ln(xmz) * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(xmz) * z * CF * pow(NC, -1) - ln(x) * ln(xmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * x * CF * pow(NC, -1) + 4 * ln(x) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * ln(x) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(omxmz) * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(x) * ln(omxmz) * CF * pow(NC, -1) + 3 * ln(x) * ln(omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 4 * ln(x) * ln(omxmz) * z * CF * pow(NC, -1) - ln(x) * ln(omxmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(omxmz) * x * CF * pow(NC, -1);
      tmp += +18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) -
             26 * ln(z) * CF * pow(NC, -1) * pow(omx, -1) + 28 * ln(z) * CF * pow(NC, -1) + 16 * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * z * CF * pow(NC, -1) + 6 * ln(z) * x * CF * pow(NC, -1) + 5 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) - 9 * pow(ln(z), 2) * CF * pow(NC, -1) * pow(omx, -1) + 6 * pow(ln(z), 2) * CF * pow(NC, -1) + 9. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5 * pow(ln(z), 2) * z * CF * pow(NC, -1) - 2 * pow(ln(z), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(z), 2) * x * CF * pow(NC, -1) + 8 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(z) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 12 * ln(z) * ln(omx) * CF * pow(NC, -1) + 6 * ln(z) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 8 * ln(z) * ln(omx) * z * CF * pow(NC, -1) - 2 * ln(z) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(omx) * x * CF * pow(NC, -1) + 12 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 8 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 20 * ln(z) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 16 * ln(z) * ln(omz) * CF * pow(NC, -1) + 10 * ln(z) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 12 * ln(z) * ln(omz) * z * CF * pow(NC, -1) - 4 * ln(z) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 8 * ln(z) * ln(omz) * x * CF * pow(NC, -1) - 2 * ln(z) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + ln(z) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(xmz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(z) * ln(xmz) * CF * pow(NC, -1);
      tmp += -2 * ln(z) * ln(xmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(z) * ln(xmz) * z * CF * pow(NC, -1) + ln(z) * ln(xmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * ln(xmz) * x * CF * pow(NC, -1) + 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 22 * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 26 * ln(omx) * CF * pow(NC, -1) + 14 * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * z * CF * pow(NC, -1) + 6 * ln(omx) * x * CF * pow(NC, -1) + 5 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 9. / 2. * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) - 6 * pow(ln(omx), 2) * CF * pow(NC, -1) * pow(omx, -1) + 9 * pow(ln(omx), 2) * CF * pow(NC, -1) + 3 * pow(ln(omx), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5 * pow(ln(omx), 2) * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(omx), 2) * x * pow(z, -1) * CF * pow(NC, -1) + pow(ln(omx), 2) * x * CF * pow(NC, -1) + 16 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 13 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 22 * ln(omx) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 26 * ln(omx) * ln(omz) * CF * pow(NC, -1) + 11 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 16 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) - 3 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(omx) * ln(omz) * x * CF * pow(NC, -1) + 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 32 * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(omz) * CF * pow(NC, -1) + 20 * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * z * CF * pow(NC, -1) + 8 * ln(omz) * x * CF * pow(NC, -1) + 8 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -13. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) - 11 * pow(ln(omz), 2) * CF * pow(NC, -1) * pow(omx, -1) + 13 * pow(ln(omz), 2) * CF * pow(NC, -1) + 11. / 2. * pow(ln(omz), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 8 * pow(ln(omz), 2) * z * CF * pow(NC, -1) - 3. / 2. * pow(ln(omz), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 3 * pow(ln(omz), 2) * x * CF * pow(NC, -1) - 4 * ln(omz) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3 * ln(omz) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(omz) * ln(omxmz) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(omz) * ln(omxmz) * CF * pow(NC, -1) - 3 * ln(omz) * ln(omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(omz) * ln(omxmz) * z * CF * pow(NC, -1) + ln(omz) * ln(omxmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(omz) * ln(omxmz) * x * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + Li2(pow(x, -1) * z * pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) + 4 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * z * CF * pow(NC, -1) + Li2(pow(x, -1) * z * pow(omx, -1) * omz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * x * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) + 4 * Li2(omx * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(omx * pow(omz, -1)) * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1);
      tmp += +2 * Li2(omx * pow(omz, -1)) * z * CF * pow(NC, -1) + Li2(omx * pow(omz, -1)) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * x * CF * pow(NC, -1) + Li2(z * pow(omx, -1)) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z * pow(omx, -1)) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z * pow(omx, -1)) * CF * pow(NC, -1) + Li2(z * pow(omx, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - Li2(z * pow(omx, -1)) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(z * pow(omx, -1)) * x * CF * pow(NC, -1) + 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * CF * pow(NC, -1) + Li2(x * z * pow(omx, -1) * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * z * CF * pow(NC, -1) + 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(z) * CF * pow(NC, -1) +
             Li2(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * z * CF * pow(NC, -1);

      res += tmp;
    }
    if (z > 1. - x && z < x)
    {
      double tmp = 0.0;
      tmp = 8 * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * pow(z, -1) * CF * pow(NC, -1) - 8 * CF * pow(NC, -1) * pow(omx, -1) + 20 * CF * pow(NC, -1) + 12 * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * z * CF * pow(NC, -1) + 10 * x * pow(z, -1) * CF * pow(NC, -1) - 10 * x * CF * pow(NC, -1) - 5. / 3. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) + 2 * pow(pi, 2) * CF * pow(NC, -1) * pow(omx, -1) - 3 * pow(pi, 2) * CF * pow(NC, -1) - pow(pi, 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 5. / 3. * pow(pi, 2) * z * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * x * pow(z, -1) * CF * pow(NC, -1) - 1. / 3. * pow(pi, 2) * x * CF * pow(NC, -1) - 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) + 48 * ln(x) * CF * pow(NC, -1) * pow(omx, -1) - 54 * ln(x) * CF * pow(NC, -1) - 30 * ln(x) * z * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * z * CF * pow(NC, -1) - 12 * ln(x) * x * CF * pow(NC, -1) + 4 * ln(x) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * ln(x) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(-omxmz) * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(x) * ln(-omxmz) * CF * pow(NC, -1) + 3 * ln(x) * ln(-omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 4 * ln(x) * ln(-omxmz) * z * CF * pow(NC, -1) - ln(x) * ln(-omxmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(-omxmz) * x * CF * pow(NC, -1) + 13 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 19. / 2. * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) - 20 * pow(ln(x), 2) * CF * pow(NC, -1) * pow(omx, -1) + 19 * pow(ln(x), 2) * CF * pow(NC, -1) + 10 * pow(ln(x), 2) * z * CF * pow(NC, -1) * pow(omx, -1) -
            13 * pow(ln(x), 2) * z * CF * pow(NC, -1);
      tmp += -7. / 2. * pow(ln(x), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 7 * pow(ln(x), 2) * x * CF * pow(NC, -1) - 20 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 14 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) + 32 * ln(x) * ln(z) * CF * pow(NC, -1) * pow(omx, -1) - 28 * ln(x) * ln(z) * CF * pow(NC, -1) - 16 * ln(x) * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(x) * ln(z) * z * CF * pow(NC, -1) + 6 * ln(x) * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(x) * ln(z) * x * CF * pow(NC, -1) - 16 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 13 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 22 * ln(x) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) - 26 * ln(x) * ln(omx) * CF * pow(NC, -1) - 11 * ln(x) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 16 * ln(x) * ln(omx) * z * CF * pow(NC, -1) + 3 * ln(x) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(omx) * x * CF * pow(NC, -1) - 22 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 16 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 34 * ln(x) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 32 * ln(x) * ln(omz) * CF * pow(NC, -1) - 17 * ln(x) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 22 * ln(x) * ln(omz) * z * CF * pow(NC, -1) + 6 * ln(x) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(x) * ln(omz) * x * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - ln(x) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(x) * ln(xmz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(x) * ln(xmz) * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(xmz) * z * CF * pow(NC, -1) - ln(x) * ln(xmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(xmz) * x * CF * pow(NC, -1);
      tmp += +18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) -
             26 * ln(z) * CF * pow(NC, -1) * pow(omx, -1) + 28 * ln(z) * CF * pow(NC, -1) + 16 * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * z * CF * pow(NC, -1) + 6 * ln(z) * x * CF * pow(NC, -1) + 5 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) - 9 * pow(ln(z), 2) * CF * pow(NC, -1) * pow(omx, -1) + 6 * pow(ln(z), 2) * CF * pow(NC, -1) + 9. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5 * pow(ln(z), 2) * z * CF * pow(NC, -1) - 2 * pow(ln(z), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(z), 2) * x * CF * pow(NC, -1) + 8 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(z) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 12 * ln(z) * ln(omx) * CF * pow(NC, -1) + 6 * ln(z) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 8 * ln(z) * ln(omx) * z * CF * pow(NC, -1) - 2 * ln(z) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(omx) * x * CF * pow(NC, -1) + 16 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 11 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 26 * ln(z) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 22 * ln(z) * ln(omz) * CF * pow(NC, -1) + 13 * ln(z) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 16 * ln(z) * ln(omz) * z * CF * pow(NC, -1) - 5 * ln(z) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 10 * ln(z) * ln(omz) * x * CF * pow(NC, -1) - 2 * ln(z) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + ln(z) * ln(xmz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(xmz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(z) * ln(xmz) * CF * pow(NC, -1);
      tmp += -2 * ln(z) * ln(xmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(z) * ln(xmz) * z * CF * pow(NC, -1) + ln(z) * ln(xmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * ln(xmz) * x * CF * pow(NC, -1) + 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 22 * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 26 * ln(omx) * CF * pow(NC, -1) + 14 * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * z * CF * pow(NC, -1) + 6 * ln(omx) * x * CF * pow(NC, -1) + 5 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 9. / 2. * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) - 6 * pow(ln(omx), 2) * CF * pow(NC, -1) * pow(omx, -1) + 9 * pow(ln(omx), 2) * CF * pow(NC, -1) + 3 * pow(ln(omx), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5 * pow(ln(omx), 2) * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(omx), 2) * x * pow(z, -1) * CF * pow(NC, -1) + pow(ln(omx), 2) * x * CF * pow(NC, -1) + 12 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 10 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 16 * ln(omx) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(omx) * ln(omz) * CF * pow(NC, -1) + 8 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 12 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) - 2 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(omx) * ln(omz) * x * CF * pow(NC, -1) + 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 32 * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(omz) * CF * pow(NC, -1) + 20 * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * z * CF * pow(NC, -1) + 8 * ln(omz) * x * CF * pow(NC, -1) - 4 * ln(omz) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += +3 * ln(omz) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(omz) * ln(-omxmz) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(omz) * ln(-omxmz) * CF * pow(NC, -1) - 3 * ln(omz) * ln(-omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(omz) * ln(-omxmz) * z * CF * pow(NC, -1) + ln(omz) * ln(-omxmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(omz) * ln(-omxmz) * x * CF * pow(NC, -1) + 8 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 6 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) - 12 * pow(ln(omz), 2) * CF * pow(NC, -1) * pow(omx, -1) + 12 * pow(ln(omz), 2) * CF * pow(NC, -1) + 6 * pow(ln(omz), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 8 * pow(ln(omz), 2) * z * CF * pow(NC, -1) - 2 * pow(ln(omz), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(omz), 2) * x * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * CF * pow(NC, -1) * pow(omx, -1) - 4 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * CF * pow(NC, -1) - Li2(pow(x, -1) * pow(z, -1) * omx * omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * z * CF * pow(NC, -1) - Li2(pow(z, -1) * omx) * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(z, -1) * omx) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(z, -1) * omx) * CF * pow(NC, -1) - Li2(pow(z, -1) * omx) * z * CF * pow(NC, -1) * pow(omx, -1) + Li2(pow(z, -1) * omx) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(pow(z, -1) * omx) * x * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1);
      tmp += +4 * Li2(omx * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(omx * pow(omz, -1)) * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(omx * pow(omz, -1)) * z * CF * pow(NC, -1) + Li2(omx * pow(omz, -1)) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(omx * pow(omz, -1)) * x * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(x * pow(z, -1) * omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) - 4 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * z * CF * pow(NC, -1) - Li2(x * pow(z, -1) * omx * pow(omz, -1)) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * x * CF * pow(NC, -1) + 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(z) * CF * pow(NC, -1) + Li2(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * z * CF * pow(NC, -1);

      res += tmp;
    }
    if (z < 1. - x && z > x)
    {
      double tmp = 0.0;
      tmp = 8 * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * pow(z, -1) * CF * pow(NC, -1) - 8 * CF * pow(NC, -1) * pow(omx, -1) + 20 * CF * pow(NC, -1) + 12 * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * z * CF * pow(NC, -1) + 10 * x * pow(z, -1) * CF * pow(NC, -1) - 10 * x * CF * pow(NC, -1) - 3 * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) +
            13. / 6. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) + 14. / 3. * pow(pi, 2) * CF * pow(NC, -1) * pow(omx, -1) - 13. / 3. * pow(pi, 2) * CF * pow(NC, -1) - 7. / 3. * pow(pi, 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 3 * pow(pi, 2) * z * CF * pow(NC, -1) + 5. / 6. * pow(pi, 2) * x * pow(z, -1) * CF * pow(NC, -1) - 5. / 3. * pow(pi, 2) * x * CF * pow(NC, -1) - 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) + 48 * ln(x) * CF * pow(NC, -1) * pow(omx, -1) - 54 * ln(x) * CF * pow(NC, -1) - 30 * ln(x) * z * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * z * CF * pow(NC, -1) - 12 * ln(x) * x * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - ln(x) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(x) * ln(-xmz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(x) * ln(-xmz) * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(-xmz) * z * CF * pow(NC, -1) - ln(x) * ln(-xmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * x * CF * pow(NC, -1) + 14 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 21. / 2. * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) - 21 * pow(ln(x), 2) * CF * pow(NC, -1) * pow(omx, -1) + 21 * pow(ln(x), 2) * CF * pow(NC, -1) + 21. / 2. * pow(ln(x), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * pow(ln(x), 2) * z * CF * pow(NC, -1);
      tmp += -7. / 2. * pow(ln(x), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 7 * pow(ln(x), 2) * x * CF * pow(NC, -1) - 18 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 12 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) + 30 * ln(x) * ln(z) * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(x) * ln(z) * CF * pow(NC, -1) - 15 * ln(x) * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(x) * ln(z) * z * CF * pow(NC, -1) + 6 * ln(x) * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(x) * ln(z) * x * CF * pow(NC, -1) - 18 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 15 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 24 * ln(x) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) - 30 * ln(x) * ln(omx) * CF * pow(NC, -1) - 12 * ln(x) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(x) * ln(omx) * z * CF * pow(NC, -1) + 3 * ln(x) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(omx) * x * CF * pow(NC, -1) - 24 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 36 * ln(x) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 36 * ln(x) * ln(omz) * CF * pow(NC, -1) - 18 * ln(x) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 24 * ln(x) * ln(omz) * z * CF * pow(NC, -1) + 6 * ln(x) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) - 12 * ln(x) * ln(omz) * x * CF * pow(NC, -1) + 4 * ln(x) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * ln(x) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(omxmz) * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(x) * ln(omxmz) * CF * pow(NC, -1) + 3 * ln(x) * ln(omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 4 * ln(x) * ln(omxmz) * z * CF * pow(NC, -1) - ln(x) * ln(omxmz) * x * pow(z, -1) * CF * pow(NC, -1);
      tmp += +2 * ln(x) * ln(omxmz) * x * CF * pow(NC, -1) + 18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) -
             18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 26 * ln(z) * CF * pow(NC, -1) * pow(omx, -1) + 28 * ln(z) * CF * pow(NC, -1) + 16 * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * z * CF * pow(NC, -1) + 6 * ln(z) * x * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + ln(z) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(-xmz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(z) * ln(-xmz) * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(z) * ln(-xmz) * z * CF * pow(NC, -1) + ln(z) * ln(-xmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * x * CF * pow(NC, -1) + 6 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 7. / 2. * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) -
             11 * pow(ln(z), 2) * CF * pow(NC, -1) * pow(omx, -1) + 7 * pow(ln(z), 2) * CF * pow(NC, -1) + 11. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 6 * pow(ln(z), 2) * z * CF * pow(NC, -1) - 5. / 2. * pow(ln(z), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 5 * pow(ln(z), 2) * x * CF * pow(NC, -1) + 6 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 5 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 8 * ln(z) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 10 * ln(z) * ln(omx) * CF * pow(NC, -1) + 4 * ln(z) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) -
             6 * ln(z) * ln(omx) * z * CF * pow(NC, -1) - ln(z) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(z) * ln(omx) * x * CF * pow(NC, -1) + 14 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 9 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1);
      tmp += -24 * ln(z) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(z) * ln(omz) * CF * pow(NC, -1) + 12 * ln(z) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * ln(z) * ln(omz) * z * CF * pow(NC, -1) - 5 * ln(z) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 10 * ln(z) * ln(omz) * x * CF * pow(NC, -1) + 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 22 * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 26 * ln(omx) * CF * pow(NC, -1) + 14 * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * z * CF * pow(NC, -1) + 6 * ln(omx) * x * CF * pow(NC, -1) + 7 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 11. / 2. * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) - 10 * pow(ln(omx), 2) * CF * pow(NC, -1) * pow(omx, -1) + 11 * pow(ln(omx), 2) * CF * pow(NC, -1) + 5 * pow(ln(omx), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 7 * pow(ln(omx), 2) * z * CF * pow(NC, -1) - 3. / 2. * pow(ln(omx), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 3 * pow(ln(omx), 2) * x * CF * pow(NC, -1) + 12 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 11 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 14 * ln(omx) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 22 * ln(omx) * ln(omz) * CF * pow(NC, -1) + 7 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 12 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) - ln(omx) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(omx) * ln(omz) * x * CF * pow(NC, -1) + 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 32 * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(omz) * CF * pow(NC, -1) + 20 * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -24 * ln(omz) * z * CF * pow(NC, -1) + 8 * ln(omz) * x * CF * pow(NC, -1) + 10 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 15. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) - 15 * pow(ln(omz), 2) * CF * pow(NC, -1) * pow(omx, -1) + 15 * pow(ln(omz), 2) * CF * pow(NC, -1) + 15. / 2. * pow(ln(omz), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 10 * pow(ln(omz), 2) * z * CF * pow(NC, -1) - 5. / 2. * pow(ln(omz), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 5 * pow(ln(omz), 2) * x * CF * pow(NC, -1) - 4 * ln(omz) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3 * ln(omz) * ln(omxmz) * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(omz) * ln(omxmz) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(omz) * ln(omxmz) * CF * pow(NC, -1) - 3 * ln(omz) * ln(omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(omz) * ln(omxmz) * z * CF * pow(NC, -1) + ln(omz) * ln(omxmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(omz) * ln(omxmz) * x * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) - 4 * Li2(pow(omx, -1) * omz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(omx, -1) * omz) * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(pow(omx, -1) * omz) * z * CF * pow(NC, -1) - Li2(pow(omx, -1) * omz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * x * CF * pow(NC, -1) + Li2(z * pow(omx, -1)) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z * pow(omx, -1)) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z * pow(omx, -1)) * CF * pow(NC, -1) + Li2(z * pow(omx, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - Li2(z * pow(omx, -1)) * x * pow(z, -1) * CF * pow(NC, -1);
      tmp += +2 * Li2(z * pow(omx, -1)) * x * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(x * pow(z, -1) * omx * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) - 4 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * z * CF * pow(NC, -1) - Li2(x * pow(z, -1) * omx * pow(omz, -1)) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(x * pow(z, -1) * omx * pow(omz, -1)) * x * CF * pow(NC, -1) + 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * CF * pow(NC, -1) + Li2(x * z * pow(omx, -1) * pow(omz, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(x * z * pow(omx, -1) * pow(omz, -1)) * z * CF * pow(NC, -1) + 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(z) * CF * pow(NC, -1) + Li2(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * z * CF * pow(NC, -1);

      res += tmp;
    }
    if (z > 1. - x && z > x)
    {
      double tmp = 0.0;
      tmp = 8 * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * pow(z, -1) * CF * pow(NC, -1) - 8 * CF * pow(NC, -1) * pow(omx, -1) + 20 * CF * pow(NC, -1) + 12 * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * z * CF * pow(NC, -1) + 10 * x * pow(z, -1) * CF * pow(NC, -1) - 10 * x * CF * pow(NC, -1) - 5. / 3. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) + 2 * pow(pi, 2) * CF * pow(NC, -1) * pow(omx, -1) - 3 * pow(pi, 2) * CF * pow(NC, -1) - pow(pi, 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 5. / 3. * pow(pi, 2) * z * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * x * pow(z, -1) * CF * pow(NC, -1) - 1. / 3. * pow(pi, 2) * x * CF * pow(NC, -1) - 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) + 48 * ln(x) * CF * pow(NC, -1) * pow(omx, -1) - 54 * ln(x) * CF * pow(NC, -1) - 30 * ln(x) * z * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(x) * z * CF * pow(NC, -1) - 12 * ln(x) * x * CF * pow(NC, -1) + 4 * ln(x) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 3 * ln(x) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(-omxmz) * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(x) * ln(-omxmz) * CF * pow(NC, -1) + 3 * ln(x) * ln(-omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) - 4 * ln(x) * ln(-omxmz) * z * CF * pow(NC, -1) - ln(x) * ln(-omxmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(-omxmz) * x * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - ln(x) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(x) * ln(-xmz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(x) * ln(-xmz) * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * z * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -2 * ln(x) * ln(-xmz) * z * CF * pow(NC, -1) - ln(x) * ln(-xmz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(-xmz) * x * CF * pow(NC, -1) + 12 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 9 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) - 18 * pow(ln(x), 2) * CF * pow(NC, -1) * pow(omx, -1) + 18 * pow(ln(x), 2) * CF * pow(NC, -1) + 9 * pow(ln(x), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 12 * pow(ln(x), 2) * z * CF * pow(NC, -1) - 3 * pow(ln(x), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 6 * pow(ln(x), 2) * x * CF * pow(NC, -1) - 18 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 13 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) + 28 * ln(x) * ln(z) * CF * pow(NC, -1) * pow(omx, -1) - 26 * ln(x) * ln(z) * CF * pow(NC, -1) - 14 * ln(x) * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(x) * ln(z) * z * CF * pow(NC, -1) + 5 * ln(x) * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) - 10 * ln(x) * ln(z) * x * CF * pow(NC, -1) - 18 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 14 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 26 * ln(x) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) - 28 * ln(x) * ln(omx) * CF * pow(NC, -1) - 13 * ln(x) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(x) * ln(omx) * z * CF * pow(NC, -1) + 4 * ln(x) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) - 8 * ln(x) * ln(omx) * x * CF * pow(NC, -1) - 20 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 15 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 30 * ln(x) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 30 * ln(x) * ln(omz) * CF * pow(NC, -1) - 15 * ln(x) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(x) * ln(omz) * z * CF * pow(NC, -1) + 5 * ln(x) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1);
      tmp += -10 * ln(x) * ln(omz) * x * CF * pow(NC, -1) + 18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) -
             18 * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 26 * ln(z) * CF * pow(NC, -1) * pow(omx, -1) + 28 * ln(z) * CF * pow(NC, -1) + 16 * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(z) * z * CF * pow(NC, -1) + 6 * ln(z) * x * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + ln(z) * ln(-xmz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(-xmz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(z) * ln(-xmz) * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(z) * ln(-xmz) * z * CF * pow(NC, -1) + ln(z) * ln(-xmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * ln(-xmz) * x * CF * pow(NC, -1) + 4 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 5. / 2. * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) - 7 * pow(ln(z), 2) * CF * pow(NC, -1) * pow(omx, -1) + 5 * pow(ln(z), 2) * CF * pow(NC, -1) + 7. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 4 * pow(ln(z), 2) * z * CF * pow(NC, -1) - 3. / 2. * pow(ln(z), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 3 * pow(ln(z), 2) * x * CF * pow(NC, -1) + 10 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 7 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 16 * ln(z) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 14 * ln(z) * ln(omx) * CF * pow(NC, -1) + 8 * ln(z) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 10 * ln(z) * ln(omx) * z * CF * pow(NC, -1) - 3 * ln(z) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(z) * ln(omx) * x * CF * pow(NC, -1) + 14 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 10 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1);
      tmp += -22 * ln(z) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(z) * ln(omz) * CF * pow(NC, -1) + 11 * ln(z) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 14 * ln(z) * ln(omz) * z * CF * pow(NC, -1) - 4 * ln(z) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 8 * ln(z) * ln(omz) * x * CF * pow(NC, -1) + 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 22 * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 26 * ln(omx) * CF * pow(NC, -1) + 14 * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 18 * ln(omx) * z * CF * pow(NC, -1) + 6 * ln(omx) * x * CF * pow(NC, -1) + 5 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 9. / 2. * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) - 6 * pow(ln(omx), 2) * CF * pow(NC, -1) * pow(omx, -1) + 9 * pow(ln(omx), 2) * CF * pow(NC, -1) + 3 * pow(ln(omx), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5 * pow(ln(omx), 2) * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(omx), 2) * x * pow(z, -1) * CF * pow(NC, -1) + pow(ln(omx), 2) * x * CF * pow(NC, -1) + 12 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 10 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 16 * ln(omx) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 20 * ln(omx) * ln(omz) * CF * pow(NC, -1) + 8 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 12 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) - 2 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(omx) * ln(omz) * x * CF * pow(NC, -1) + 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 32 * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 36 * ln(omz) * CF * pow(NC, -1) + 20 * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -24 * ln(omz) * z * CF * pow(NC, -1) + 8 * ln(omz) * x * CF * pow(NC, -1) - 4 * ln(omz) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3 * ln(omz) * ln(-omxmz) * pow(z, -1) * CF * pow(NC, -1) + 6 * ln(omz) * ln(-omxmz) * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(omz) * ln(-omxmz) * CF * pow(NC, -1) - 3 * ln(omz) * ln(-omxmz) * z * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(omz) * ln(-omxmz) * z * CF * pow(NC, -1) + ln(omz) * ln(-omxmz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(omz) * ln(-omxmz) * x * CF * pow(NC, -1) + 8 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 6 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) - 12 * pow(ln(omz), 2) * CF * pow(NC, -1) * pow(omx, -1) + 12 * pow(ln(omz), 2) * CF * pow(NC, -1) + 6 * pow(ln(omz), 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 8 * pow(ln(omz), 2) * z * CF * pow(NC, -1) - 2 * pow(ln(omz), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(omz), 2) * x * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * CF * pow(NC, -1) * pow(omx, -1) - 4 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * CF * pow(NC, -1) - Li2(pow(x, -1) * pow(z, -1) * omx * omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * pow(z, -1) * omx * omz) * z * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + Li2(pow(x, -1) * z * pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) + 4 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * CF * pow(NC, -1);
      tmp += -2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * z * CF * pow(NC, -1) + Li2(pow(x, -1) * z * pow(omx, -1) * omz) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(pow(x, -1) * z * pow(omx, -1) * omz) * x * CF * pow(NC, -1) - Li2(pow(z, -1) * omx) * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(z, -1) * omx) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(z, -1) * omx) * CF * pow(NC, -1) - Li2(pow(z, -1) * omx) * z * CF * pow(NC, -1) * pow(omx, -1) + Li2(pow(z, -1) * omx) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(pow(z, -1) * omx) * x * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * pow(NC, -1) - 4 * Li2(pow(omx, -1) * omz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(pow(omx, -1) * omz) * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(pow(omx, -1) * omz) * z * CF * pow(NC, -1) - Li2(pow(omx, -1) * omz) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(pow(omx, -1) * omz) * x * CF * pow(NC, -1) + 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(z) * CF * pow(NC, -1) * pow(omx, -1) +
             4 * Li2(z) * CF * pow(NC, -1) + Li2(z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * z * CF * pow(NC, -1);

      res += tmp;
    }
    if (z > x)
    {
      double tmp = 0.0;
      tmp = -4 * pow(z, -1) * CF * NC * pow(omx, -1) + 7 * pow(z, -1) * CF * NC + 4 * CF * NC * pow(omx, -1) - 9 * CF * NC - 5 * z * CF * NC * pow(omx, -1) + 4 * z * CF * NC - 3 * x * pow(z, -1) * CF * NC + 6 * x * CF * NC + pow(pi, 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 1. / 2. * pow(pi, 2) * pow(z, -1) * CF * NC - pow(pi, 2) * CF * NC * pow(omx, -1) + pow(pi, 2) * CF * NC + 1. / 2. * pow(pi, 2) * z * CF * NC * pow(omx, -1) - pow(pi, 2) * z * CF * NC - 1. / 2. * pow(pi, 2) * x * pow(z, -1) * CF * NC + pow(pi, 2) * x * CF * NC + 18 * ln(x) * pow(z, -1) * CF * NC * pow(omx, -1) - 18 * ln(x) * pow(z, -1) * CF * NC -
            18 * ln(x) * CF * NC * pow(omx, -1) + 15 * ln(x) * CF * NC + 12 * ln(x) * z * CF * NC * pow(omx, -1) - 18 * ln(x) * z * CF * NC + 18 * ln(x) * x * CF * NC - 2 * ln(x) * ln(-xmz) * pow(z, -1) * CF * NC * pow(omx, -1) + ln(x) * ln(-xmz) * pow(z, -1) * CF * NC + 2 * ln(x) * ln(-xmz) * CF * NC * pow(omx, -1) - 2 * ln(x) * ln(-xmz) * CF * NC - ln(x) * ln(-xmz) * z * CF * NC * pow(omx, -1) + 2 * ln(x) * ln(-xmz) * z * CF * NC + ln(x) * ln(-xmz) * x * pow(z, -1) * CF * NC -
            2 * ln(x) * ln(-xmz) * x * CF * NC - 7 * pow(ln(x), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 7. / 2. * pow(ln(x), 2) * pow(z, -1) * CF * NC + 7 * pow(ln(x), 2) * CF * NC * pow(omx, -1) - 7 * pow(ln(x), 2) * CF * NC - 7. / 2. * pow(ln(x), 2) * z * CF * NC * pow(omx, -1) + 7 * pow(ln(x), 2) * z * CF * NC + 7. / 2. * pow(ln(x), 2) * x * pow(z, -1) * CF * NC - 7 * pow(ln(x), 2) * x * CF * NC + 12 * ln(x) * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) - 6 * ln(x) * ln(z) * pow(z, -1) * CF * NC - 12 * ln(x) * ln(z) * CF * NC * pow(omx, -1) + 12 * ln(x) * ln(z) * CF * NC + 6 * ln(x) * ln(z) * z * CF * NC * pow(omx, -1) - 12 * ln(x) * ln(z) * z * CF * NC - 6 * ln(x) * ln(z) * x * pow(z, -1) * CF * NC + 12 * ln(x) * ln(z) * x * CF * NC + 12 * ln(x) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1);
      tmp += -6 * ln(x) * ln(omx) * pow(z, -1) * CF * NC - 12 * ln(x) * ln(omx) * CF * NC * pow(omx, -1) + 12 * ln(x) * ln(omx) * CF * NC + 6 * ln(x) * ln(omx) * z * CF * NC * pow(omx, -1) - 12 * ln(x) * ln(omx) * z * CF * NC - 6 * ln(x) * ln(omx) * x * pow(z, -1) * CF * NC + 12 * ln(x) * ln(omx) * x * CF * NC + 6 * ln(x) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) - 3 * ln(x) * ln(omz) * pow(z, -1) * CF * NC - 6 * ln(x) * ln(omz) * CF * NC * pow(omx, -1) + 6 * ln(x) * ln(omz) * CF * NC + 3 * ln(x) * ln(omz) * z * CF * NC * pow(omx, -1) - 6 * ln(x) * ln(omz) * z * CF * NC - 3 * ln(x) * ln(omz) * x * pow(z, -1) * CF * NC + 6 * ln(x) * ln(omz) * x * CF * NC - 12 * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) + 12 * ln(z) * pow(z, -1) * CF * NC + 12 * ln(z) * CF * NC * pow(omx, -1) - 10 * ln(z) * CF * NC - 8 * ln(z) * z * CF * NC * pow(omx, -1) + 12 * ln(z) * z * CF * NC - 12 * ln(z) * x * CF * NC + 2 * ln(z) * ln(-xmz) * pow(z, -1) * CF * NC * pow(omx, -1) - ln(z) * ln(-xmz) * pow(z, -1) * CF * NC - 2 * ln(z) * ln(-xmz) * CF * NC * pow(omx, -1) + 2 * ln(z) * ln(-xmz) * CF * NC +
             ln(z) * ln(-xmz) * z * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(-xmz) * z * CF * NC - ln(z) * ln(-xmz) * x * pow(z, -1) * CF * NC + 2 * ln(z) * ln(-xmz) * x * CF * NC - 5 * pow(ln(z), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 5. / 2. * pow(ln(z), 2) * pow(z, -1) * CF * NC + 5 * pow(ln(z), 2) * CF * NC * pow(omx, -1) - 5 * pow(ln(z), 2) * CF * NC - 5. / 2. * pow(ln(z), 2) * z * CF * NC * pow(omx, -1) + 5 * pow(ln(z), 2) * z * CF * NC + 5. / 2. * pow(ln(z), 2) * x * pow(z, -1) * CF * NC - 5 * pow(ln(z), 2) * x * CF * NC - 10 * ln(z) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) + 5 * ln(z) * ln(omx) * pow(z, -1) * CF * NC + 10 * ln(z) * ln(omx) * CF * NC * pow(omx, -1) - 10 * ln(z) * ln(omx) * CF * NC - 5 * ln(z) * ln(omx) * z * CF * NC * pow(omx, -1);
      tmp += +10 * ln(z) * ln(omx) * z * CF * NC + 5 * ln(z) * ln(omx) * x * pow(z, -1) * CF * NC - 10 * ln(z) * ln(omx) * x * CF * NC - 2 * ln(z) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + ln(z) * ln(omz) * pow(z, -1) * CF * NC + 2 * ln(z) * ln(omz) * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(omz) * CF * NC - ln(z) * ln(omz) * z * CF * NC * pow(omx, -1) + 2 * ln(z) * ln(omz) * z * CF * NC + ln(z) * ln(omz) * x * pow(z, -1) * CF * NC - 2 * ln(z) * ln(omz) * x * CF * NC - 12 * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) + 12 * ln(omx) * pow(z, -1) * CF * NC + 12 * ln(omx) * CF * NC * pow(omx, -1) -
             10 * ln(omx) * CF * NC - 8 * ln(omx) * z * CF * NC * pow(omx, -1) + 12 * ln(omx) * z * CF * NC - 12 * ln(omx) * x * CF * NC -
             4 * pow(ln(omx), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * pow(ln(omx), 2) * pow(z, -1) * CF * NC + 4 * pow(ln(omx), 2) * CF * NC * pow(omx, -1) - 4 * pow(ln(omx), 2) * CF * NC - 2 * pow(ln(omx), 2) * z * CF * NC * pow(omx, -1) + 4 * pow(ln(omx), 2) * z * CF * NC + 2 * pow(ln(omx), 2) * x * pow(z, -1) * CF * NC - 4 * pow(ln(omx), 2) * x * CF * NC - 4 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC + 4 * ln(omx) * ln(omz) * CF * NC * pow(omx, -1) - 4 * ln(omx) * ln(omz) * CF * NC - 2 * ln(omx) * ln(omz) * z * CF * NC * pow(omx, -1) + 4 * ln(omx) * ln(omz) * z * CF * NC + 2 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * NC - 4 * ln(omx) * ln(omz) * x * CF * NC - 6 * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 6 * ln(omz) * pow(z, -1) * CF * NC + 6 * ln(omz) * CF * NC * pow(omx, -1) - 5 * ln(omz) * CF * NC - 4 * ln(omz) * z * CF * NC * pow(omx, -1) + 6 * ln(omz) * z * CF * NC - 6 * ln(omz) * x * CF * NC - pow(ln(omz), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 1. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * NC +
             pow(ln(omz), 2) * CF * NC * pow(omx, -1);
      tmp += -pow(ln(omz), 2) * CF * NC - 1. / 2. * pow(ln(omz), 2) * z * CF * NC * pow(omx, -1) + pow(ln(omz), 2) * z * CF * NC + 1. / 2. * pow(ln(omz), 2) * x * pow(z, -1) * CF * NC - pow(ln(omz), 2) * x * CF * NC + 2 * Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * NC * pow(omx, -1) - Li2(pow(omx, -1) * omz) * pow(z, -1) * CF * NC - 2 * Li2(pow(omx, -1) * omz) * CF * NC * pow(omx, -1) + 2 * Li2(pow(omx, -1) * omz) * CF * NC + Li2(pow(omx, -1) * omz) * z * CF * NC * pow(omx, -1) - 2 * Li2(pow(omx, -1) * omz) * z * CF * NC - Li2(pow(omx, -1) * omz) * x * pow(z, -1) * CF * NC + 2 * Li2(pow(omx, -1) * omz) * x * CF * NC - 2 * Li2(x * pow(z, -1) * pow(omx, -1) * omz) * pow(z, -1) * CF * NC * pow(omx, -1) +
             Li2(x * pow(z, -1) * pow(omx, -1) * omz) * pow(z, -1) * CF * NC + 2 * Li2(x * pow(z, -1) * pow(omx, -1) * omz) * CF * NC * pow(omx, -1) - 2 * Li2(x * pow(z, -1) * pow(omx, -1) * omz) * CF * NC - Li2(x * pow(z, -1) * pow(omx, -1) * omz) * z * CF * NC * pow(omx, -1) + 2 * Li2(x * pow(z, -1) * pow(omx, -1) * omz) * z * CF * NC + Li2(x * pow(z, -1) * pow(omx, -1) * omz) * x * pow(z, -1) * CF * NC - 2 * Li2(x * pow(z, -1) * pow(omx, -1) * omz) * x * CF * NC + 2 * Li2(z) * pow(z, -1) * CF * NC * pow(omx, -1) - Li2(z) * pow(z, -1) * CF * NC - 2 * Li2(z) * CF * NC * pow(omx, -1) + 2 * Li2(z) * CF * NC + Li2(z) * z * CF * NC * pow(omx, -1) - 2 * Li2(z) * z * CF * NC - Li2(z) * x * pow(z, -1) * CF * NC + 2 * Li2(z) * x * CF * NC;

      res += tmp;
    }
    if (z < x)
    {
      double tmp = 0.0;
      tmp = -4 * pow(z, -1) * CF * NC * pow(omx, -1) + 7 * pow(z, -1) * CF * NC + 4 * CF * NC * pow(omx, -1) - 9 * CF * NC - 5 * z * CF * NC * pow(omx, -1) + 4 * z * CF * NC - 3 * x * pow(z, -1) * CF * NC + 6 * x * CF * NC + pow(pi, 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 1. / 2. * pow(pi, 2) * pow(z, -1) * CF * NC - pow(pi, 2) * CF * NC * pow(omx, -1) + pow(pi, 2) * CF * NC + 1. / 2. * pow(pi, 2) * z * CF * NC * pow(omx, -1) - pow(pi, 2) * z * CF * NC - 1. / 2. * pow(pi, 2) * x * pow(z, -1) * CF * NC + pow(pi, 2) * x * CF * NC + 18 * ln(x) * pow(z, -1) * CF * NC * pow(omx, -1) - 18 * ln(x) * pow(z, -1) * CF * NC -
            18 * ln(x) * CF * NC * pow(omx, -1) + 15 * ln(x) * CF * NC + 12 * ln(x) * z * CF * NC * pow(omx, -1) - 18 * ln(x) * z * CF * NC + 18 * ln(x) * x * CF * NC - 6 * pow(ln(x), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 3 * pow(ln(x), 2) * pow(z, -1) * CF * NC + 6 * pow(ln(x), 2) * CF * NC * pow(omx, -1) - 6 * pow(ln(x), 2) * CF * NC - 3 * pow(ln(x), 2) * z * CF * NC * pow(omx, -1) + 6 * pow(ln(x), 2) * z * CF * NC + 3 * pow(ln(x), 2) * x * pow(z, -1) * CF * NC - 6 * pow(ln(x), 2) * x * CF * NC + 10 * ln(x) * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) - 5 * ln(x) * ln(z) * pow(z, -1) * CF * NC - 10 * ln(x) * ln(z) * CF * NC * pow(omx, -1) + 10 * ln(x) * ln(z) * CF * NC + 5 * ln(x) * ln(z) * z * CF * NC * pow(omx, -1) - 10 * ln(x) * ln(z) * z * CF * NC - 5 * ln(x) * ln(z) * x * pow(z, -1) * CF * NC + 10 * ln(x) * ln(z) * x * CF * NC + 10 * ln(x) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) - 5 * ln(x) * ln(omx) * pow(z, -1) * CF * NC - 10 * ln(x) * ln(omx) * CF * NC * pow(omx, -1) + 10 * ln(x) * ln(omx) * CF * NC + 5 * ln(x) * ln(omx) * z * CF * NC * pow(omx, -1) - 10 * ln(x) * ln(omx) * z * CF * NC - 5 * ln(x) * ln(omx) * x * pow(z, -1) * CF * NC + 10 * ln(x) * ln(omx) * x * CF * NC + 8 * ln(x) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1);
      tmp += -4 * ln(x) * ln(omz) * pow(z, -1) * CF * NC - 8 * ln(x) * ln(omz) * CF * NC * pow(omx, -1) + 8 * ln(x) * ln(omz) * CF * NC + 4 * ln(x) * ln(omz) * z * CF * NC * pow(omx, -1) - 8 * ln(x) * ln(omz) * z * CF * NC - 4 * ln(x) * ln(omz) * x * pow(z, -1) * CF * NC + 8 * ln(x) * ln(omz) * x * CF * NC - 2 * ln(x) * ln(xmz) * pow(z, -1) * CF * NC * pow(omx, -1) +
             ln(x) * ln(xmz) * pow(z, -1) * CF * NC + 2 * ln(x) * ln(xmz) * CF * NC * pow(omx, -1) - 2 * ln(x) * ln(xmz) * CF * NC -
             ln(x) * ln(xmz) * z * CF * NC * pow(omx, -1) + 2 * ln(x) * ln(xmz) * z * CF * NC + ln(x) * ln(xmz) * x * pow(z, -1) * CF * NC - 2 * ln(x) * ln(xmz) * x * CF * NC - 12 * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) + 12 * ln(z) * pow(z, -1) * CF * NC + 12 * ln(z) * CF * NC * pow(omx, -1) - 10 * ln(z) * CF * NC - 8 * ln(z) * z * CF * NC * pow(omx, -1) + 12 * ln(z) * z * CF * NC - 12 * ln(z) * x * CF * NC - 4 * pow(ln(z), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * pow(ln(z), 2) * pow(z, -1) * CF * NC + 4 * pow(ln(z), 2) * CF * NC * pow(omx, -1) - 4 * pow(ln(z), 2) * CF * NC - 2 * pow(ln(z), 2) * z * CF * NC * pow(omx, -1) + 4 * pow(ln(z), 2) * z * CF * NC + 2 * pow(ln(z), 2) * x * pow(z, -1) * CF * NC - 4 * pow(ln(z), 2) * x * CF * NC - 8 * ln(z) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) + 4 * ln(z) * ln(omx) * pow(z, -1) * CF * NC + 8 * ln(z) * ln(omx) * CF * NC * pow(omx, -1) - 8 * ln(z) * ln(omx) * CF * NC - 4 * ln(z) * ln(omx) * z * CF * NC * pow(omx, -1) + 8 * ln(z) * ln(omx) * z * CF * NC + 4 * ln(z) * ln(omx) * x * pow(z, -1) * CF * NC - 8 * ln(z) * ln(omx) * x * CF * NC - 4 * ln(z) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * ln(z) * ln(omz) * pow(z, -1) * CF * NC + 4 * ln(z) * ln(omz) * CF * NC * pow(omx, -1) - 4 * ln(z) * ln(omz) * CF * NC - 2 * ln(z) * ln(omz) * z * CF * NC * pow(omx, -1) + 4 * ln(z) * ln(omz) * z * CF * NC;
      tmp += +2 * ln(z) * ln(omz) * x * pow(z, -1) * CF * NC - 4 * ln(z) * ln(omz) * x * CF * NC + 2 * ln(z) * ln(xmz) * pow(z, -1) * CF * NC * pow(omx, -1) - ln(z) * ln(xmz) * pow(z, -1) * CF * NC - 2 * ln(z) * ln(xmz) * CF * NC * pow(omx, -1) + 2 * ln(z) * ln(xmz) * CF * NC + ln(z) * ln(xmz) * z * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(xmz) * z * CF * NC - ln(z) * ln(xmz) * x * pow(z, -1) * CF * NC + 2 * ln(z) * ln(xmz) * x * CF * NC - 12 * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) + 12 * ln(omx) * pow(z, -1) * CF * NC + 12 * ln(omx) * CF * NC * pow(omx, -1) - 10 * ln(omx) * CF * NC - 8 * ln(omx) * z * CF * NC * pow(omx, -1) + 12 * ln(omx) * z * CF * NC - 12 * ln(omx) * x * CF * NC - 4 * pow(ln(omx), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * pow(ln(omx), 2) * pow(z, -1) * CF * NC + 4 * pow(ln(omx), 2) * CF * NC * pow(omx, -1) - 4 * pow(ln(omx), 2) * CF * NC - 2 * pow(ln(omx), 2) * z * CF * NC * pow(omx, -1) + 4 * pow(ln(omx), 2) * z * CF * NC + 2 * pow(ln(omx), 2) * x * pow(z, -1) * CF * NC - 4 * pow(ln(omx), 2) * x * CF * NC - 4 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC + 4 * ln(omx) * ln(omz) * CF * NC * pow(omx, -1) - 4 * ln(omx) * ln(omz) * CF * NC - 2 * ln(omx) * ln(omz) * z * CF * NC * pow(omx, -1) + 4 * ln(omx) * ln(omz) * z * CF * NC + 2 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * NC - 4 * ln(omx) * ln(omz) * x * CF * NC - 6 * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 6 * ln(omz) * pow(z, -1) * CF * NC + 6 * ln(omz) * CF * NC * pow(omx, -1) - 5 * ln(omz) * CF * NC - 4 * ln(omz) * z * CF * NC * pow(omx, -1) + 6 * ln(omz) * z * CF * NC - 6 * ln(omz) * x * CF * NC - pow(ln(omz), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 1. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * NC + pow(ln(omz), 2) * CF * NC * pow(omx, -1);
      tmp += -pow(ln(omz), 2) * CF * NC - 1. / 2. * pow(ln(omz), 2) * z * CF * NC * pow(omx, -1) + pow(ln(omz), 2) * z * CF * NC + 1. / 2. * pow(ln(omz), 2) * x * pow(z, -1) * CF * NC - pow(ln(omz), 2) * x * CF * NC + 2 * Li2(pow(x, -1) * z * omx * pow(omz, -1)) * pow(z, -1) * CF * NC * pow(omx, -1) - Li2(pow(x, -1) * z * omx * pow(omz, -1)) * pow(z, -1) * CF * NC - 2 * Li2(pow(x, -1) * z * omx * pow(omz, -1)) * CF * NC * pow(omx, -1) + 2 * Li2(pow(x, -1) * z * omx * pow(omz, -1)) * CF * NC + Li2(pow(x, -1) * z * omx * pow(omz, -1)) * z * CF * NC * pow(omx, -1) - 2 * Li2(pow(x, -1) * z * omx * pow(omz, -1)) * z * CF * NC - Li2(pow(x, -1) * z * omx * pow(omz, -1)) * x * pow(z, -1) * CF * NC + 2 * Li2(pow(x, -1) * z * omx * pow(omz, -1)) * x * CF * NC - 2 * Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * NC * pow(omx, -1) + Li2(omx * pow(omz, -1)) * pow(z, -1) * CF * NC + 2 * Li2(omx * pow(omz, -1)) * CF * NC * pow(omx, -1) - 2 * Li2(omx * pow(omz, -1)) * CF * NC - Li2(omx * pow(omz, -1)) * z * CF * NC * pow(omx, -1) + 2 * Li2(omx * pow(omz, -1)) * z * CF * NC + Li2(omx * pow(omz, -1)) * x * pow(z, -1) * CF * NC - 2 * Li2(omx * pow(omz, -1)) * x * CF * NC + 2 * Li2(z) * pow(z, -1) * CF * NC * pow(omx, -1) - Li2(z) * pow(z, -1) * CF * NC - 2 * Li2(z) * CF * NC * pow(omx, -1) + 2 * Li2(z) * CF * NC + Li2(z) * z * CF * NC * pow(omx, -1) - 2 * Li2(z) * z * CF * NC - Li2(z) * x * pow(z, -1) * CF * NC + 2 * Li2(z) * x * CF * NC;

      res += tmp;
    }
    if (z < 1. - x)
    {
      double tmp = 0.0;
      tmp = 0;

      res += tmp;
    }
    if (z > 1. - x)
    {
      double tmp = 0.0;
      tmp = 0;

      res += tmp;
    }
    if (z != x && z != 1. - x)
    {
      double tmp = 0.0;
      tmp = -8 * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 8 * pow(z, -1) * CF * pow(NC, -1) - 4 * pow(z, -1) * CF * pow(NC, -1) * pow(rln2, 2) * pow(omx, -1) + 2 * pow(z, -1) * CF * pow(NC, -1) * pow(rln2, 2) - 6 * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * rln2 * pow(omx, -1) + 2 * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * rln2 + 4 * pow(z, -1) * CF * NC * pow(omx, -1) + 89. / 18. * pow(z, -1) * CF * NC - 8 * pow(z, -1) * pow(CF, 2) + 1. / 3. * pow(z, -1) * LMUR * CF * NF - 11. / 6. * pow(z, -1) * LMUR * CF * NC - 7. / 4. * pow(z, -1) * LMUF * CF * pow(NC, -1) + 7. / 4. * pow(z, -1) * LMUF * CF * NC - 2 * pow(z, -1) * LMUA * CF * pow(NC, -1) - 1. / 3. * pow(z, -1) * LMUA * CF * NF - 11. / 6. * pow(z, -1) * LMUA * CF * NC - 8 * pow(z, -1) * LMUA * pow(CF, 2) + pow(z, -1) * LMUA * LMUF * CF * pow(NC, -1) - pow(z, -1) * LMUA * LMUF * CF * NC + 8 * CF * pow(NC, -1) * pow(omx, -1) - 2 * CF * pow(NC, -1) * pow(omxmz, -1) - 25. / 4. * CF * pow(NC, -1) +
            4 * CF * pow(NC, -1) * pow(rln2, 2) * pow(omx, -1) + 2 * CF * pow(NC, -1) * sqrtxz1 * rln2 * pow(omx, -1) + 2 * CF * pow(NC, -1) * sqrtxz1 * rln2 - 4 * CF * NC * pow(omx, -1) - 13. / 12. * CF * NC - 8 * CF * NC * pow(rln2, 2) * pow(omx, -1) + 4 * CF * NC * pow(rln2, 2) - 4 * CF * NC * sqrtxz1 * rln2 * pow(omx, -1) + 4 * CF * NC * sqrtxz1 * rln2 + 8 * pow(CF, 2) - 2. / 3. * LMUR * CF * NF + 11. / 3. * LMUR * CF * NC + 5. / 2. * LMUF * CF * pow(NC, -1) - 5. / 2. * LMUF * CF * NC + 1. / 2. * LMUA * CF * pow(NC, -1) + 2. / 3. * LMUA * CF * NF - 13. / 6. * LMUA * CF * NC + 8 * LMUA * pow(CF, 2) -
            LMUA * LMUF * CF * pow(NC, -1) + LMUA * LMUF * CF * NC - 12 * z * CF * pow(NC, -1) * pow(omx, -1) + 4 * z * CF * pow(NC, -1) * pow(omxmz, -1) + 21. / 2. * z * CF * pow(NC, -1) - 2 * z * CF * pow(NC, -1) * pow(rln2, 2) * pow(omx, -1) + 5 * z * CF * NC * pow(omx, -1);
      tmp += -35. / 3. * z * CF * NC + 4 * z * CF * NC * pow(rln2, 2) + 8 * z * pow(CF, 2) + 2. / 3. * z * LMUR * CF * NF - 11. / 3. * z * LMUR * CF * NC - 3. / 2. * z * LMUF * CF * pow(NC, -1) + 3. / 2. * z * LMUF * CF * NC - 2. / 3. * z * LMUA * CF * NF + 14. / 3. * z * LMUA * CF * NC - 4 * z * LMUA * pow(CF, 2) + 1. / 2. * z * LMUA * LMUF * CF * pow(NC, -1) - 1. / 2. * z * LMUA * LMUF * CF * NC - 2 * pow(z, 2) * CF * pow(NC, -1) * pow(omxmz, -1) + 41. / 9. * pow(z, 2) * CF * NC + 8. / 3. * pow(z, 2) * LMUA * CF * NC - 5 * x * pow(z, -1) * CF * pow(NC, -1) + 2 * x * pow(z, -1) * CF * pow(NC, -1) * pow(rln2, 2) + 4 * x * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * rln2 + 11. / 18. * x * pow(z, -1) * CF * NC + 8 * x * pow(z, -1) * pow(CF, 2) + 1. / 3. * x * pow(z, -1) * LMUR * CF * NF - 11. / 6. * x * pow(z, -1) * LMUR * CF * NC + 1. / 4. * x * pow(z, -1) * LMUF * CF * pow(NC, -1) - 1. / 4. * x * pow(z, -1) * LMUF * CF * NC + 5 * x * pow(z, -1) * LMUA * CF * pow(NC, -1) - 1. / 3. * x * pow(z, -1) * LMUA * CF * NF - 65. / 6. * x * pow(z, -1) * LMUA * CF * NC + 8 * x * pow(z, -1) * LMUA * pow(CF, 2) + x * pow(z, -1) * LMUA * LMUF * CF * pow(NC, -1) - x * pow(z, -1) * LMUA * LMUF * CF * NC + 33. / 4. * x * CF * pow(NC, -1) - 115. / 12. * x * CF * NC + 4 * x * CF * NC * pow(rln2, 2) - 8 * x * pow(CF, 2) - 2. / 3. * x * LMUR * CF * NF + 11. / 3. * x * LMUR * CF * NC + 1. / 2. * x * LMUF * CF * pow(NC, -1) - 1. / 2. * x * LMUF * CF * NC - 9. / 2. * x * LMUA * CF * pow(NC, -1) + 2. / 3. * x * LMUA * CF * NF + 41. / 6. * x * LMUA * CF * NC - 8 * x * LMUA * pow(CF, 2) - x * LMUA * LMUF * CF * pow(NC, -1) + x * LMUA * LMUF * CF * NC - 9. / 2. * x * z * CF * pow(NC, -1) + 28. / 3. * x * z * CF * NC - 8 * x * z * pow(CF, 2) - x * z * LMUF * CF * pow(NC, -1) + x * z * LMUF * CF * NC + x * z * LMUA * CF * pow(NC, -1) + 2 * x * z * LMUA * CF * NC + 4 * x * z * LMUA * pow(CF, 2) + 1. / 2. * x * z * LMUA * LMUF * CF * pow(NC, -1);
      tmp += -1. / 2. * x * z * LMUA * LMUF * CF * NC - 19. / 9. * x * pow(z, 2) * CF * NC - 4. / 3. * x * pow(z, 2) * LMUA * CF * NC + 8. / 3. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 29. / 12. * pow(pi, 2) * pow(z, -1) * CF * pow(NC, -1) - 2 * pow(pi, 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 17. / 12. * pow(pi, 2) * pow(z, -1) * CF * NC - 10. / 3. * pow(pi, 2) * CF * pow(NC, -1) * pow(omx, -1) + 25. / 6. * pow(pi, 2) * CF * pow(NC, -1) + 4. / 3. * pow(pi, 2) * CF * NC * pow(omx, -1) - 5. / 6. * pow(pi, 2) * CF * NC + 5. / 3. * pow(pi, 2) * z * CF * pow(NC, -1) * pow(omx, -1) - 5. / 2. * pow(pi, 2) * z * CF * pow(NC, -1) - pow(pi, 2) * z * CF * NC * pow(omx, -1) + 5. / 2. * pow(pi, 2) * z * CF * NC - 13. / 12. * pow(pi, 2) * x * pow(z, -1) * CF * pow(NC, -1) + 17. / 12. * pow(pi, 2) * x * pow(z, -1) * CF * NC + 7. / 6. * pow(pi, 2) * x * CF * pow(NC, -1) - 1. / 2. * pow(pi, 2) * x * CF * NC - 1. / 6. * pow(pi, 2) * x * z * CF * pow(NC, -1) + 1. / 6. * pow(pi, 2) * x * z * CF * NC + 8 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * rln2 * pow(omx, -1) - 4 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * rln2 + 6 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1) - 2 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 - 4 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * NC * rln2 * pow(omx, -1) + 2 * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * NC * rln2 -
             8 * ln(1 + sqrtxz1 - z) * CF * pow(NC, -1) * rln2 * pow(omx, -1) - 2 * ln(1 + sqrtxz1 - z) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1) - 2 * ln(1 + sqrtxz1 - z) * CF * pow(NC, -1) * sqrtxz1 + 12 * ln(1 + sqrtxz1 - z) * CF * NC * rln2 * pow(omx, -1) - 4 * ln(1 + sqrtxz1 - z) * CF * NC * rln2 + 4 * ln(1 + sqrtxz1 - z) * CF * NC * sqrtxz1 * pow(omx, -1);
      tmp += -4 * ln(1 + sqrtxz1 - z) * CF * NC * sqrtxz1 + 4 * ln(1 + sqrtxz1 - z) * z * CF * pow(NC, -1) * rln2 * pow(omx, -1) - 2 * ln(1 + sqrtxz1 - z) * z * CF * NC * rln2 * pow(omx, -1) - 4 * ln(1 + sqrtxz1 - z) * z * CF * NC * rln2 - 4 * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * pow(NC, -1) * rln2 - 4 * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 + 2 * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * NC * rln2 - 4 * ln(1 + sqrtxz1 - z) * x * CF * NC * rln2 - 4 * pow(ln(1 + sqrtxz1 - z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 2 * pow(ln(1 + sqrtxz1 - z), 2) * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(1 + sqrtxz1 - z), 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 2 * pow(ln(1 + sqrtxz1 - z), 2) * pow(z, -1) * CF * NC + 4 * pow(ln(1 + sqrtxz1 - z), 2) * CF * pow(NC, -1) * pow(omx, -1) - 4 * pow(ln(1 + sqrtxz1 - z), 2) * CF * NC * pow(omx, -1) - 2 * pow(ln(1 + sqrtxz1 - z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * pow(ln(1 + sqrtxz1 - z), 2) * z * CF * NC * pow(omx, -1) + 2 * pow(ln(1 + sqrtxz1 - z), 2) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * pow(ln(1 + sqrtxz1 - z), 2) * x * pow(z, -1) * CF * NC - 4 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC - 4 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * CF * NC * pow(omx, -1) + 4 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * CF * NC - 2 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * z * CF * NC * pow(omx, -1) + 4 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * z * CF * NC + 2 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * x * pow(z, -1) * CF * NC + 4 * ln(1 + sqrtxz1 - z) * ln(1 + sqrtxz1 + z) * x * CF * NC;
      tmp += +4 * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC * rln2 * pow(omx, -1) - 2 * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC * rln2 + 4 * ln(1 + sqrtxz1 + z) * CF * NC * rln2 * pow(omx, -1) - 4 * ln(1 + sqrtxz1 + z) * CF * NC * rln2 + 2 * ln(1 + sqrtxz1 + z) * z * CF * NC * rln2 * pow(omx, -1) - 4 * ln(1 + sqrtxz1 + z) * z * CF * NC * rln2 - 2 * ln(1 + sqrtxz1 + z) * x * pow(z, -1) * CF * NC * rln2 - 4 * ln(1 + sqrtxz1 + z) * x * CF * NC * rln2 - 1. / 3. * ln(x * z * omx * omz) * pow(z, -1) * CF * NF * pow(omx, -1) + 36 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) -
             153. / 4. * ln(x) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * rln2 * pow(omx, -1) + 3 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * rln2 - 3 * ln(x) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1) +
             ln(x) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 + 1. / 3. * ln(x) * pow(z, -1) * CF * NF * pow(omx, -1) - 1. / 3. * ln(x) * pow(z, -1) * CF * NC * pow(omx, -1) + 119. / 12. * ln(x) * pow(z, -1) * CF * NC + 4 * ln(x) * pow(z, -1) * CF * NC * rln2 * pow(omx, -1) - 2 * ln(x) * pow(z, -1) * CF * NC * rln2 - 4 * ln(x) * pow(z, -1) * pow(CF, 2) - 2 * ln(x) * pow(z, -1) * LMUF * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * ln(x) * pow(z, -1) * LMUF * CF * pow(NC, -1) + 2 * ln(x) * pow(z, -1) * LMUF * CF * NC * pow(omx, -1) - 3. / 2. * ln(x) * pow(z, -1) * LMUF * CF * NC - 2 * ln(x) * pow(z, -1) * LMUA * CF * pow(NC, -1) * pow(omx, -1) + ln(x) * pow(z, -1) * LMUA * CF * pow(NC, -1) + 2 * ln(x) * pow(z, -1) * LMUA * CF * NC * pow(omx, -1) - ln(x) * pow(z, -1) * LMUA * CF * NC - 48 * ln(x) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * CF * pow(NC, -1) * pow(omxmz, -1) + 55 * ln(x) * CF * pow(NC, -1) + 6 * ln(x) * CF * pow(NC, -1) * rln2 * pow(omx, -1) + ln(x) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1);
      tmp += +ln(x) * CF * pow(NC, -1) * sqrtxz1 + 8 * ln(x) * CF * NC * pow(omx, -1) - 13 * ln(x) * CF * NC - 8 * ln(x) * CF * NC * rln2 * pow(omx, -1) + 2 * ln(x) * CF * NC * rln2 - 2 * ln(x) * CF * NC * sqrtxz1 * pow(omx, -1) + 2 * ln(x) * CF * NC * sqrtxz1 + 2 * ln(x) * LMUF * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * LMUF * CF * pow(NC, -1) - 2 * ln(x) * LMUF * CF * NC * pow(omx, -1) + 2 * ln(x) * LMUF * CF * NC + 2 * ln(x) * LMUA * CF * pow(NC, -1) * pow(omx, -1) - ln(x) * LMUA * CF * pow(NC, -1) - 2 * ln(x) * LMUA * CF * NC * pow(omx, -1) + ln(x) * LMUA * CF * NC + 123. / 4. * ln(x) * z * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(x) * z * CF * pow(NC, -1) * pow(omxmz, -2) - 8 * ln(x) * z * CF * pow(NC, -1) * pow(omxmz, -1) - 57. / 2. * ln(x) * z * CF * pow(NC, -1) - 3 * ln(x) * z * CF * pow(NC, -1) * rln2 * pow(omx, -1) - 75. / 4. * ln(x) * z * CF * NC * pow(omx, -1) + 39. / 2. * ln(x) * z * CF * NC + 2 * ln(x) * z * CF * NC * rln2 * pow(omx, -1) + 2 * ln(x) * z * CF * NC * rln2 + 4 * ln(x) * z * pow(CF, 2) - ln(x) * z * LMUF * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * ln(x) * z * LMUF * CF * pow(NC, -1) + ln(x) * z * LMUF * CF * NC * pow(omx, -1) - 3. / 2. * ln(x) * z * LMUF * CF * NC - ln(x) * z * LMUA * CF * pow(NC, -1) * pow(omx, -1) + 1. / 2. * ln(x) * z * LMUA * CF * pow(NC, -1) + ln(x) * z * LMUA * CF * NC * pow(omx, -1) - 1. / 2. * ln(x) * z * LMUA * CF * NC - 6 * ln(x) * pow(z, 2) * CF * pow(NC, -1) * pow(omxmz, -2) + 4 * ln(x) * pow(z, 2) * CF * pow(NC, -1) * pow(omxmz, -1) - 8. / 3. * ln(x) * pow(z, 2) * CF * NC * pow(omx, -1) + 16. / 3. * ln(x) * pow(z, 2) * CF * NC + 15. / 4. * ln(x) * x * pow(z, -1) * CF * pow(NC, -1) + 3 * ln(x) * x * pow(z, -1) * CF * pow(NC, -1) * rln2 + 2 * ln(x) * x * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 - 205. / 12. * ln(x) * x * pow(z, -1) * CF * NC - 2 * ln(x) * x * pow(z, -1) * CF * NC * rln2;
      tmp += +4 * ln(x) * x * pow(z, -1) * pow(CF, 2) + 3. / 2. * ln(x) * x * pow(z, -1) * LMUF * CF * pow(NC, -1) - 3. / 2. * ln(x) * x * pow(z, -1) * LMUF * CF * NC + ln(x) * x * pow(z, -1) * LMUA * CF * pow(NC, -1) - ln(x) * x * pow(z, -1) * LMUA * CF * NC - 6 * ln(x) * x * CF * pow(NC, -1) * pow(omxmz, -2) + 12 * ln(x) * x * CF * pow(NC, -1) * pow(omxmz, -1) + 4 * ln(x) * x * CF * pow(NC, -1) - 5 * ln(x) * x * CF * NC + 2 * ln(x) * x * CF * NC * rln2 - 2 * ln(x) * x * LMUF * CF * pow(NC, -1) + 2 * ln(x) * x * LMUF * CF * NC - ln(x) * x * LMUA * CF * pow(NC, -1) + ln(x) * x * LMUA * CF * NC + 3. / 2. * ln(x) * x * z * CF * pow(NC, -1) + 9. / 2. * ln(x) * x * z * CF * NC + 4 * ln(x) * x * z * pow(CF, 2) + 1. / 2. * ln(x) * x * z * LMUF * CF * pow(NC, -1) - 1. / 2. * ln(x) * x * z * LMUF * CF * NC + 1. / 2. * ln(x) * x * z * LMUA * CF * pow(NC, -1) - 1. / 2. * ln(x) * x * z * LMUA * CF * NC - 8. / 3. * ln(x) * x * pow(z, 2) * CF * NC + 6 * ln(x) * pow(x, 2) * CF * pow(NC, -1) * pow(omxmz, -2) - 6 * ln(x) * pow(x, 2) * CF * pow(NC, -1) * pow(omxmz, -1) - 2 * ln(x) * pow(x, 3) * CF * pow(NC, -1) * pow(omxmz, -2) + 4 * ln(x) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) - 4 * ln(x) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * ln(x) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * NC - 4 * ln(x) * ln(1 + sqrtxz1 - z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(x) * ln(1 + sqrtxz1 - z) * CF * NC * pow(omx, -1) + 2 * ln(x) * ln(1 + sqrtxz1 - z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(1 + sqrtxz1 - z) * z * CF * NC * pow(omx, -1) - 2 * ln(x) * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * ln(x) * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * NC + 2 * ln(x) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -ln(x) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(x) * ln(1 + sqrtxz1 + z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(x) * ln(1 + sqrtxz1 + z) * CF * NC * pow(omx, -1) - 2 * ln(x) * ln(1 + sqrtxz1 + z) * CF * NC + ln(x) * ln(1 + sqrtxz1 + z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(x) * ln(1 + sqrtxz1 + z) * z * CF * NC - ln(x) * ln(1 + sqrtxz1 + z) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(x) * ln(1 + sqrtxz1 + z) * x * CF * NC - 17 * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 25. / 2. * pow(ln(x), 2) * pow(z, -1) * CF * pow(NC, -1) + 10 * pow(ln(x), 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 11. / 2. * pow(ln(x), 2) * pow(z, -1) * CF * NC + 24 * pow(ln(x), 2) * CF * pow(NC, -1) * pow(omx, -1) - 23 * pow(ln(x), 2) * CF * pow(NC, -1) - 10 * pow(ln(x), 2) * CF * NC * pow(omx, -1) + 9 * pow(ln(x), 2) * CF * NC - 12 * pow(ln(x), 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 31. / 2. * pow(ln(x), 2) * z * CF * pow(NC, -1) + 5 * pow(ln(x), 2) * z * CF * NC * pow(omx, -1) - 17. / 2. * pow(ln(x), 2) * z * CF * NC + 11. / 2. * pow(ln(x), 2) * x * pow(z, -1) * CF * pow(NC, -1) - 11. / 2. * pow(ln(x), 2) * x * pow(z, -1) * CF * NC - 9 * pow(ln(x), 2) * x * CF * pow(NC, -1) + 9 * pow(ln(x), 2) * x * CF * NC + 1. / 2. * pow(ln(x), 2) * x * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(x), 2) * x * z * CF * NC + 16 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 11 * ln(x) * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(x) * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) + 3 * ln(x) * ln(z) * pow(z, -1) * CF * NC - 25 * ln(x) * ln(z) * CF * pow(NC, -1) * pow(omx, -1) +
             20 * ln(x) * ln(z) * CF * pow(NC, -1) + 19 * ln(x) * ln(z) * CF * NC * pow(omx, -1) - 16 * ln(x) * ln(z) * CF * NC + 25. / 2. * ln(x) * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -17 * ln(x) * ln(z) * z * CF * pow(NC, -1) + 7. / 2. * ln(x) * ln(z) * z * CF * NC * pow(omx, -1) - ln(x) * ln(z) * z * CF * NC - 5 * ln(x) * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) + 3 * ln(x) * ln(z) * x * pow(z, -1) * CF * NC + 10 * ln(x) * ln(z) * x * CF * pow(NC, -1) - 18 * ln(x) * ln(z) * x * CF * NC + 20 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 15 * ln(x) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) - 16 * ln(x) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) + 8 * ln(x) * ln(omx) * pow(z, -1) * CF * NC - 26 * ln(x) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1) + 30 * ln(x) * ln(omx) * CF * pow(NC, -1) + 16 * ln(x) * ln(omx) * CF * NC * pow(omx, -1) - 16 * ln(x) * ln(omx) * CF * NC + 13 * ln(x) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) - 19 * ln(x) * ln(omx) * z * CF * pow(NC, -1) - 8 * ln(x) * ln(omx) * z * CF * NC * pow(omx, -1) + 15 * ln(x) * ln(omx) * z * CF * NC - 5 * ln(x) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 8 * ln(x) * ln(omx) * x * pow(z, -1) * CF * NC + 10 * ln(x) * ln(omx) * x * CF * pow(NC, -1) -
             16 * ln(x) * ln(omx) * x * CF * NC - ln(x) * ln(omx) * x * z * CF * pow(NC, -1) + ln(x) * ln(omx) * x * z * CF * NC + 24 * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 35. / 2. * ln(x) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) - 14 * ln(x) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) + 15. / 2. * ln(x) * ln(omz) * pow(z, -1) * CF * NC - 34 * ln(x) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 33 * ln(x) * ln(omz) * CF * pow(NC, -1) + 14 * ln(x) * ln(omz) * CF * NC * pow(omx, -1) - 13 * ln(x) * ln(omz) * CF * NC + 17 * ln(x) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) -
             22 * ln(x) * ln(omz) * z * CF * pow(NC, -1) - 7 * ln(x) * ln(omz) * z * CF * NC * pow(omx, -1) + 12 * ln(x) * ln(omz) * z * CF * NC;
      tmp += -15. / 2. * ln(x) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 15. / 2. * ln(x) * ln(omz) * x * pow(z, -1) * CF * NC + 13 * ln(x) * ln(omz) * x * CF * pow(NC, -1) - 13 * ln(x) * ln(omz) * x * CF * NC - ln(x) * ln(omz) * x * z * CF * pow(NC, -1) + ln(x) * ln(omz) * x * z * CF * NC - 15 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 19 * ln(z) * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * rln2 * pow(omx, -1) + ln(z) * pow(z, -1) * CF * pow(NC, -1) * rln2 - 3 * ln(z) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1) + ln(z) * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 + 1. / 3. * ln(z) * pow(z, -1) * CF * NF * pow(omx, -1) + 12 * ln(z) * pow(z, -1) * CF * NC * pow(omx, -1) - 19. / 3. * ln(z) * pow(z, -1) * CF * NC - 4 * ln(z) * pow(z, -1) * CF * NC * rln2 * pow(omx, -1) + 2 * ln(z) * pow(z, -1) * CF * NC * rln2 + 8 * ln(z) * pow(z, -1) * pow(CF, 2) - ln(z) * pow(z, -1) * LMUF * CF * pow(NC, -1) + ln(z) * pow(z, -1) * LMUF * CF * NC - 2 * ln(z) * pow(z, -1) * LMUA * CF * NC + 28 * ln(z) * CF * pow(NC, -1) * pow(omx, -1) - 38 * ln(z) * CF * pow(NC, -1) + 2 * ln(z) * CF * pow(NC, -1) * rln2 * pow(omx, -1) + ln(z) * CF * pow(NC, -1) * sqrtxz1 * pow(omx, -1) + ln(z) * CF * pow(NC, -1) * sqrtxz1 - 10 * ln(z) * CF * NC * pow(omx, -1) + 20 * ln(z) * CF * NC - 8 * ln(z) * CF * NC * rln2 * pow(omx, -1) + 6 * ln(z) * CF * NC * rln2 - 2 * ln(z) * CF * NC * sqrtxz1 * pow(omx, -1) + 2 * ln(z) * CF * NC * sqrtxz1 - 8 * ln(z) * pow(CF, 2) + ln(z) * LMUF * CF * pow(NC, -1) - ln(z) * LMUF * CF * NC - ln(z) * LMUA * CF * pow(NC, -1) - 3 * ln(z) * LMUA * CF * NC - 17 * ln(z) * z * CF * pow(NC, -1) * pow(omx, -1) + 22 * ln(z) * z * CF * pow(NC, -1) - ln(z) * z * CF * pow(NC, -1) * rln2 * pow(omx, -1) + 10 * ln(z) * z * CF * NC * pow(omx, -1);
      tmp += -18 * ln(z) * z * CF * NC - 2 * ln(z) * z * CF * NC * rln2 * pow(omx, -1) + 6 * ln(z) * z * CF * NC * rln2 + 4 * ln(z) * z * pow(CF, 2) - 1. / 2. * ln(z) * z * LMUF * CF * pow(NC, -1) + 1. / 2. * ln(z) * z * LMUF * CF * NC - 1. / 2. * ln(z) * z * LMUA * CF * pow(NC, -1) - 15. / 2. * ln(z) * z * LMUA * CF * NC - 8. / 3. * ln(z) * pow(z, 2) * CF * NC - 7 * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) + ln(z) * x * pow(z, -1) * CF * pow(NC, -1) * rln2 + 2 * ln(z) * x * pow(z, -1) * CF * pow(NC, -1) * sqrtxz1 + 50. / 3. * ln(z) * x * pow(z, -1) * CF * NC + 2 * ln(z) * x * pow(z, -1) * CF * NC * rln2 - 8 * ln(z) * x * pow(z, -1) * pow(CF, 2) - ln(z) * x * pow(z, -1) * LMUF * CF * pow(NC, -1) + ln(z) * x * pow(z, -1) * LMUF * CF * NC - 2 * ln(z) * x * pow(z, -1) * LMUA * CF * NC - ln(z) * x * CF * pow(NC, -1) + 8 * ln(z) * x * CF * NC + 6 * ln(z) * x * CF * NC * rln2 + 8 * ln(z) * x * pow(CF, 2) + ln(z) * x * LMUF * CF * pow(NC, -1) - ln(z) * x * LMUF * CF * NC + ln(z) * x * LMUA * CF * pow(NC, -1) - 5 * ln(z) * x * LMUA * CF * NC - 2 * ln(z) * x * z * CF * pow(NC, -1) - ln(z) * x * z * CF * NC - 4 * ln(z) * x * z * pow(CF, 2) - 1. / 2. * ln(z) * x * z * LMUF * CF * pow(NC, -1) + 1. / 2. * ln(z) * x * z * LMUF * CF * NC + 1. / 2. * ln(z) * x * z * LMUA * CF * pow(NC, -1) - 1. / 2. * ln(z) * x * z * LMUA * CF * NC + 4. / 3. * ln(z) * x * pow(z, 2) * CF * NC + 2 * ln(z) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - ln(z) * ln(1 + sqrtxz1 - z) * pow(z, -1) * CF * pow(NC, -1) - 2 * ln(z) * ln(1 + sqrtxz1 - z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * ln(z) * ln(1 + sqrtxz1 - z) * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(1 + sqrtxz1 - z) * CF * NC + ln(z) * ln(1 + sqrtxz1 - z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * ln(z) * ln(1 + sqrtxz1 - z) * z * CF * NC - ln(z) * ln(1 + sqrtxz1 - z) * x * pow(z, -1) * CF * pow(NC, -1);
      tmp += -2 * ln(z) * ln(1 + sqrtxz1 - z) * x * CF * NC + 4 * ln(z) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(1 + sqrtxz1 + z) * pow(z, -1) * CF * NC + 4 * ln(z) * ln(1 + sqrtxz1 + z) * CF * NC * pow(omx, -1) - 4 * ln(z) * ln(1 + sqrtxz1 + z) * CF * NC + 2 * ln(z) * ln(1 + sqrtxz1 + z) * z * CF * NC * pow(omx, -1) - 4 * ln(z) * ln(1 + sqrtxz1 + z) * z * CF * NC - 2 * ln(z) * ln(1 + sqrtxz1 + z) * x * pow(z, -1) * CF * NC - 4 * ln(z) * ln(1 + sqrtxz1 + z) * x * CF * NC - 4 * ln(z) * ln(1 + z) * pow(z, -1) * CF * NC * pow(omx, -1) - 4 * ln(z) * ln(1 + z) * CF * NC * pow(omx, -1) - 2 * ln(z) * ln(1 + z) * z * CF * NC * pow(omx, -1) - 3 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 2 * pow(ln(z), 2) * pow(z, -1) * CF * pow(NC, -1) + pow(ln(z), 2) * pow(z, -1) * CF * NC * pow(omx, -1) + 5. / 2. * pow(ln(z), 2) * pow(z, -1) * CF * NC + 6 * pow(ln(z), 2) * CF * pow(NC, -1) * pow(omx, -1) - 4 * pow(ln(z), 2) * CF * pow(NC, -1) - 3 * pow(ln(z), 2) * CF * NC * pow(omx, -1) + 7 * pow(ln(z), 2) * CF * NC - 3 * pow(ln(z), 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 9. / 2. * pow(ln(z), 2) * z * CF * pow(NC, -1) + 1. / 2. * pow(ln(z), 2) * z * CF * NC * pow(omx, -1) + 15. / 2. * pow(ln(z), 2) * z * CF * NC + pow(ln(z), 2) * x * pow(z, -1) * CF * pow(NC, -1) + 5. / 2. * pow(ln(z), 2) * x * pow(z, -1) * CF * NC - 4 * pow(ln(z), 2) * x * CF * pow(NC, -1) + 9 * pow(ln(z), 2) * x * CF * NC - 1. / 2. * pow(ln(z), 2) * x * z * CF * pow(NC, -1) + 1. / 2. * pow(ln(z), 2) * x * z * CF * NC - 8 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 7 * ln(z) * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 8 * ln(z) * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) - 3 * ln(z) * ln(omx) * pow(z, -1) * CF * NC + 12 * ln(z) * ln(omx) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -12 * ln(z) * ln(omx) * CF * pow(NC, -1) - 8 * ln(z) * ln(omx) * CF * NC * pow(omx, -1) + 12 * ln(z) * ln(omx) * CF * NC - 6 * ln(z) * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 9 * ln(z) * ln(omx) * z * CF * pow(NC, -1) +
             4 * ln(z) * ln(omx) * z * CF * NC * pow(omx, -1) - ln(z) * ln(omx) * z * CF * NC + 3 * ln(z) * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) - 3 * ln(z) * ln(omx) * x * pow(z, -1) * CF * NC - 6 * ln(z) * ln(omx) * x * CF * pow(NC, -1) + 14 * ln(z) * ln(omx) * x * CF * NC - 12 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 6 * ln(z) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(z) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) - 5 * ln(z) * ln(omz) * pow(z, -1) * CF * NC + 20 * ln(z) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 12 * ln(z) * ln(omz) * CF * pow(NC, -1) - 4 * ln(z) * ln(omz) * CF * NC * pow(omx, -1) + 10 * ln(z) * ln(omz) * CF * NC - 10 * ln(z) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 10 * ln(z) * ln(omz) * z * CF * pow(NC, -1) + 2 * ln(z) * ln(omz) * z * CF * NC * pow(omx, -1) - 10 * ln(z) * ln(omz) * z * CF * NC + 4 * ln(z) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) - 5 * ln(z) * ln(omz) * x * pow(z, -1) * CF * NC - 8 * ln(z) * ln(omz) * x * CF * pow(NC, -1) + 10 * ln(z) * ln(omz) * x * CF * NC - 18 * ln(omx) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 81. / 4. * ln(omx) * pow(z, -1) * CF * pow(NC, -1) + 1. / 3. * ln(omx) * pow(z, -1) * CF * NF * pow(omx, -1) + 12 * ln(omx) * pow(z, -1) * CF * NC * pow(omx, -1) - 103. / 12. * ln(omx) * pow(z, -1) * CF * NC +
             8 * ln(omx) * pow(z, -1) * pow(CF, 2) - 2 * ln(omx) * pow(z, -1) * LMUF * CF * pow(NC, -1) + 2 * ln(omx) * pow(z, -1) * LMUF * CF * NC - ln(omx) * pow(z, -1) * LMUA * CF * pow(NC, -1) + ln(omx) * pow(z, -1) * LMUA * CF * NC + 22 * ln(omx) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -27 * ln(omx) * CF * pow(NC, -1) - 12 * ln(omx) * CF * NC * pow(omx, -1) + 8 * ln(omx) * CF * NC - 8 * ln(omx) * pow(CF, 2) + 3 * ln(omx) * LMUF * CF * pow(NC, -1) - 3 * ln(omx) * LMUF * CF * NC + ln(omx) * LMUA * CF * pow(NC, -1) - ln(omx) * LMUA * CF * NC - 14 * ln(omx) * z * CF * pow(NC, -1) * pow(omx, -1) + 18 * ln(omx) * z * CF * pow(NC, -1) + 8 * ln(omx) * z * CF * NC * pow(omx, -1) - 13 * ln(omx) * z * CF * NC + 4 * ln(omx) * z * pow(CF, 2) - 5. / 2. * ln(omx) * z * LMUF * CF * pow(NC, -1) + 5. / 2. * ln(omx) * z * LMUF * CF * NC - 1. / 2. * ln(omx) * z * LMUA * CF * pow(NC, -1) + 1. / 2. * ln(omx) * z * LMUA * CF * NC - 8. / 3. * ln(omx) * pow(z, 2) * CF * NC - 27. / 4. * ln(omx) * x * pow(z, -1) * CF * pow(NC, -1) + 173. / 12. * ln(omx) * x * pow(z, -1) * CF * NC - 8 * ln(omx) * x * pow(z, -1) * pow(CF, 2) -
             2 * ln(omx) * x * pow(z, -1) * LMUF * CF * pow(NC, -1) + 2 * ln(omx) * x * pow(z, -1) * LMUF * CF * NC - ln(omx) * x * pow(z, -1) * LMUA * CF * pow(NC, -1) + ln(omx) * x * pow(z, -1) * LMUA * CF * NC + 2 * ln(omx) * x * CF * pow(NC, -1) - ln(omx) * x * CF * NC + 8 * ln(omx) * x * pow(CF, 2) + 3 * ln(omx) * x * LMUF * CF * pow(NC, -1) - 3 * ln(omx) * x * LMUF * CF * NC + ln(omx) * x * LMUA * CF * pow(NC, -1) - ln(omx) * x * LMUA * CF * NC - 3. / 2. * ln(omx) * x * z * CF * pow(NC, -1) -
             3. / 2. * ln(omx) * x * z * CF * NC - 4 * ln(omx) * x * z * pow(CF, 2) - 1. / 2. * ln(omx) * x * z * LMUF * CF * pow(NC, -1) + 1. / 2. * ln(omx) * x * z * LMUF * CF * NC - 1. / 2. * ln(omx) * x * z * LMUA * CF * pow(NC, -1) + 1. / 2. * ln(omx) * x * z * LMUA * CF * NC + 4. / 3. * ln(omx) * x * pow(z, 2) * CF * NC - 5 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) +
             6 * pow(ln(omx), 2) * pow(z, -1) * CF * pow(NC, -1) + 4 * pow(ln(omx), 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 7. / 2. * pow(ln(omx), 2) * pow(z, -1) * CF * NC;
      tmp += +6 * pow(ln(omx), 2) * CF * pow(NC, -1) * pow(omx, -1) - 11 * pow(ln(omx), 2) * CF * pow(NC, -1) - 4 * pow(ln(omx), 2) * CF * NC * pow(omx, -1) + 6 * pow(ln(omx), 2) * CF * NC - 3 * pow(ln(omx), 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 13. / 2. * pow(ln(omx), 2) * z * CF * pow(NC, -1) + 2 * pow(ln(omx), 2) * z * CF * NC * pow(omx, -1) -
             11. / 2. * pow(ln(omx), 2) * z * CF * NC + 2 * pow(ln(omx), 2) * x * pow(z, -1) * CF * pow(NC, -1) - 7. / 2. * pow(ln(omx), 2) * x * pow(z, -1) * CF * NC - 3 * pow(ln(omx), 2) * x * CF * pow(NC, -1) + 6 * pow(ln(omx), 2) * x * CF * NC + 1. / 2. * pow(ln(omx), 2) * x * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(omx), 2) * x * z * CF * NC - 12 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 11 * ln(omx) * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 4 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1) - 6 * ln(omx) * ln(omz) * pow(z, -1) * CF * NC + 16 * ln(omx) * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) - 20 * ln(omx) * ln(omz) * CF * pow(NC, -1) - 4 * ln(omx) * ln(omz) * CF * NC * pow(omx, -1) + 10 * ln(omx) * ln(omz) * CF * NC - 8 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) + 13 * ln(omx) * ln(omz) * z * CF * pow(NC, -1) + 2 * ln(omx) * ln(omz) * z * CF * NC * pow(omx, -1) - 9 * ln(omx) * ln(omz) * z * CF * NC + 5 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) - 6 * ln(omx) * ln(omz) * x * pow(z, -1) * CF * NC - 8 * ln(omx) * ln(omz) * x * CF * pow(NC, -1) + 10 * ln(omx) * ln(omz) * x * CF * NC + ln(omx) * ln(omz) * x * z * CF * pow(NC, -1) - ln(omx) * ln(omz) * x * z * CF * NC - 24 * ln(omz) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 105. / 4. * ln(omz) * pow(z, -1) * CF * pow(NC, -1) + 1. / 3. * ln(omz) * pow(z, -1) * CF * NF * pow(omx, -1) + 6 * ln(omz) * pow(z, -1) * CF * NC * pow(omx, -1);
      tmp += -31. / 12. * ln(omz) * pow(z, -1) * CF * NC + 8 * ln(omz) * pow(z, -1) * pow(CF, 2) - ln(omz) * pow(z, -1) * LMUF * CF * pow(NC, -1) + ln(omz) * pow(z, -1) * LMUF * CF * NC - ln(omz) * pow(z, -1) * LMUA * CF * pow(NC, -1) + 3 * ln(omz) * pow(z, -1) * LMUA * CF * NC + 32 * ln(omz) * CF * pow(NC, -1) * pow(omx, -1) + 2 * ln(omz) * CF * pow(NC, -1) * pow(omxmz, -1) - 38 * ln(omz) * CF * pow(NC, -1) - 6 * ln(omz) * CF * NC * pow(omx, -1) + 3 * ln(omz) * CF * NC - 8 * ln(omz) * pow(CF, 2) + ln(omz) * LMUF * CF * pow(NC, -1) - ln(omz) * LMUF * CF * NC + ln(omz) * LMUA * CF * pow(NC, -1) - 5 * ln(omz) * LMUA * CF * NC - 20 * ln(omz) * z * CF * pow(NC, -1) * pow(omx, -1) - 6 * ln(omz) * z * CF * pow(NC, -1) * pow(omxmz, -2) + 8 * ln(omz) * z * CF * pow(NC, -1) * pow(omxmz, -1) + 37. / 2. * ln(omz) * z * CF * pow(NC, -1) + 4 * ln(omz) * z * CF * NC * pow(omx, -1) - 11. / 2. * ln(omz) * z * CF * NC + 4 * ln(omz) * z * pow(CF, 2) - 1. / 2. * ln(omz) * z * LMUF * CF * pow(NC, -1) + 1. / 2. * ln(omz) * z * LMUF * CF * NC - 1. / 2. * ln(omz) * z * LMUA * CF * pow(NC, -1) + 9. / 2. * ln(omz) * z * LMUA * CF * NC + 6 * ln(omz) * pow(z, 2) * CF * pow(NC, -1) * pow(omxmz, -2) - 4 * ln(omz) * pow(z, 2) * CF * pow(NC, -1) * pow(omxmz, -1) - 8. / 3. * ln(omz) * pow(z, 2) * CF * NC - 27. / 4. * ln(omz) * x * pow(z, -1) * CF * pow(NC, -1) + 173. / 12. * ln(omz) * x * pow(z, -1) * CF * NC - 8 * ln(omz) * x * pow(z, -1) * pow(CF, 2) - ln(omz) * x * pow(z, -1) * LMUF * CF * pow(NC, -1) + ln(omz) * x * pow(z, -1) * LMUF * CF * NC - ln(omz) * x * pow(z, -1) * LMUA * CF * pow(NC, -1) + 3 * ln(omz) * x * pow(z, -1) * LMUA * CF * NC + 6 * ln(omz) * x * CF * pow(NC, -1) * pow(omxmz, -2) - 12 * ln(omz) * x * CF * pow(NC, -1) * pow(omxmz, -1) + 3 * ln(omz) * x * CF * pow(NC, -1) - 7 * ln(omz) * x * CF * NC;
      tmp += +8 * ln(omz) * x * pow(CF, 2) + ln(omz) * x * LMUF * CF * pow(NC, -1) - ln(omz) * x * LMUF * CF * NC + ln(omz) * x * LMUA * CF * pow(NC, -1) - 5 * ln(omz) * x * LMUA * CF * NC - 3 * ln(omz) * x * z * CF * NC - 4 * ln(omz) * x * z * pow(CF, 2) - 1. / 2. * ln(omz) * x * z * LMUF * CF * pow(NC, -1) + 1. / 2. * ln(omz) * x * z * LMUF * CF * NC - 1. / 2. * ln(omz) * x * z * LMUA * CF * pow(NC, -1) + 1. / 2. * ln(omz) * x * z * LMUA * CF * NC + 4. / 3. * ln(omz) * x * pow(z, 2) * CF * NC - 6 * ln(omz) * pow(x, 2) * CF * pow(NC, -1) * pow(omxmz, -2) + 6 * ln(omz) * pow(x, 2) * CF * pow(NC, -1) * pow(omxmz, -1) +
             2 * ln(omz) * pow(x, 3) * CF * pow(NC, -1) * pow(omxmz, -2) - 8 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 7 * pow(ln(omz), 2) * pow(z, -1) * CF * pow(NC, -1) + pow(ln(omz), 2) * pow(z, -1) * CF * NC * pow(omx, -1) - 5. / 2. * pow(ln(omz), 2) * pow(z, -1) * CF * NC + 12 * pow(ln(omz), 2) * CF * pow(NC, -1) * pow(omx, -1) - 13 * pow(ln(omz), 2) * CF * pow(NC, -1) - pow(ln(omz), 2) * CF * NC * pow(omx, -1) + 4 * pow(ln(omz), 2) * CF * NC - 6 * pow(ln(omz), 2) * z * CF * pow(NC, -1) * pow(omx, -1) + 17. / 2. * pow(ln(omz), 2) * z * CF * pow(NC, -1) + 1. / 2. * pow(ln(omz), 2) * z * CF * NC * pow(omx, -1) - 7. / 2. * pow(ln(omz), 2) * z * CF * NC + 3 * pow(ln(omz), 2) * x * pow(z, -1) * CF * pow(NC, -1) - 5. / 2. * pow(ln(omz), 2) * x * pow(z, -1) * CF * NC - 5 * pow(ln(omz), 2) * x * CF * pow(NC, -1) + 4 * pow(ln(omz), 2) * x * CF * NC + 1. / 2. * pow(ln(omz), 2) * x * z * CF * pow(NC, -1) - 1. / 2. * pow(ln(omz), 2) * x * z * CF * NC + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * pow(NC, -1);
      tmp += -4 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * NC * pow(omx, -1) + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * NC - 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * CF * NC + Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * NC * pow(omx, -1) + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * NC - Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * pow(z, -1) * CF * NC + 2 * Li2(1. / 2. - 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * CF * NC - 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * pow(NC, -1) + 4 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * NC * pow(omx, -1) - 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * pow(z, -1) * CF * NC + 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * CF * NC - Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * NC * pow(omx, -1);
      tmp += -2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * z * CF * NC + Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * pow(z, -1) * CF * NC - 2 * Li2(1. / 2. + 1. / 2. * pow(z, -1) - 1. / 2. * pow(z, -1) * sqrtxz1) * x * CF * NC + 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * CF * pow(NC, -1) * pow(omx, -1) + 4 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * CF * NC * pow(omx, -1) - 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * CF * NC + Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * z * CF * NC - Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * x * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 - 1. / 2. * z) * x * CF * NC - 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) +
             Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * CF * pow(NC, -1) * pow(omx, -1) - 4 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * CF * NC * pow(omx, -1) + 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * CF * NC - Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * z * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * z * CF * NC + Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * x * pow(z, -1) * CF * pow(NC, -1) + 2 * Li2(1. / 2. - 1. / 2. * sqrtxz1 + 1. / 2. * z) * x * CF * NC + 2 * Li2(1 - x * pow(z, -1)) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1);
      tmp += -Li2(1 - x * pow(z, -1)) * pow(z, -1) * CF * pow(NC, -1) - 2 * Li2(1 - x * pow(z, -1)) * pow(z, -1) * CF * NC * pow(omx, -1) + Li2(1 - x * pow(z, -1)) * pow(z, -1) * CF * NC - 4 * Li2(1 - x * pow(z, -1)) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(1 - x * pow(z, -1)) * CF * pow(NC, -1) + 2 * Li2(1 - x * pow(z, -1)) * CF * NC * pow(omx, -1) - 2 * Li2(1 - x * pow(z, -1)) * CF * NC + 2 * Li2(1 - x * pow(z, -1)) * z * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(1 - x * pow(z, -1)) * z * CF * pow(NC, -1) - Li2(1 - x * pow(z, -1)) * z * CF * NC * pow(omx, -1) + 2 * Li2(1 - x * pow(z, -1)) * z * CF * NC - Li2(1 - x * pow(z, -1)) * x * pow(z, -1) * CF * pow(NC, -1) + Li2(1 - x * pow(z, -1)) * x * pow(z, -1) * CF * NC + 2 * Li2(1 - x * pow(z, -1)) * x * CF * pow(NC, -1) - 2 * Li2(1 - x * pow(z, -1)) * x * CF * NC - 4 * Li2(-z) * pow(z, -1) * CF * NC * pow(omx, -1) - 4 * Li2(-z) * CF * NC * pow(omx, -1) - 2 * Li2(-z) * z * CF * NC * pow(omx, -1) - 2 * Li2(x) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) + 3. / 2. * Li2(x) * pow(z, -1) * CF * pow(NC, -1) - 1. / 2. * Li2(x) * pow(z, -1) * CF * NC + 2 * Li2(x) * CF * pow(NC, -1) * pow(omx, -1) - Li2(x) * CF * pow(NC, -1) - Li2(x) * CF * NC - Li2(x) * z * CF * pow(NC, -1) * pow(omx, -1) + Li2(x) * z * CF * pow(NC, -1) + Li2(x) * z * CF * NC + 3. / 2. * Li2(x) * x * pow(z, -1) * CF * pow(NC, -1) - 1. / 2. * Li2(x) * x * pow(z, -1) * CF * NC - Li2(x) * x * CF * pow(NC, -1) - Li2(x) * x * CF * NC - 4 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) * pow(omx, -1) - 2 * Li2(z) * pow(z, -1) * CF * pow(NC, -1) - 3 * Li2(z) * pow(z, -1) * CF * NC + 6 * Li2(z) * CF * pow(NC, -1) * pow(omx, -1) + 2 * Li2(z) * CF * pow(NC, -1) - 3 * Li2(z) * z * CF * pow(NC, -1) * pow(omx, -1) - Li2(z) * z * CF * pow(NC, -1) - 11 * Li2(z) * z * CF * NC;
      tmp += -3 * Li2(z) * x * pow(z, -1) * CF * NC - 2 * Li2(z) * x * CF * NC;

      res += tmp;
    }
    return res;
  }
}